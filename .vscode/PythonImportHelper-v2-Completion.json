[
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "SitewiseAssetsCache",
        "importPath": "sitewise_assets_cache",
        "description": "sitewise_assets_cache",
        "isExtraImport": true,
        "detail": "sitewise_assets_cache",
        "documentation": {}
    },
    {
        "label": "SitewiseAssetsCache",
        "importPath": "sitewise_assets_cache",
        "description": "sitewise_assets_cache",
        "isExtraImport": true,
        "detail": "sitewise_assets_cache",
        "documentation": {}
    },
    {
        "label": "SitewiseAssetsCache",
        "importPath": "sitewise_assets_cache",
        "description": "sitewise_assets_cache",
        "isExtraImport": true,
        "detail": "sitewise_assets_cache",
        "documentation": {}
    },
    {
        "label": "SitewiseAssetsCache",
        "importPath": "sitewise_assets_cache",
        "description": "sitewise_assets_cache",
        "isExtraImport": true,
        "detail": "sitewise_assets_cache",
        "documentation": {}
    },
    {
        "label": "boto3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "boto3",
        "description": "boto3",
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Sqs",
        "importPath": "sqs",
        "description": "sqs",
        "isExtraImport": true,
        "detail": "sqs",
        "documentation": {}
    },
    {
        "label": "Sqs",
        "importPath": "sqs",
        "description": "sqs",
        "isExtraImport": true,
        "detail": "sqs",
        "documentation": {}
    },
    {
        "label": "Sitewise",
        "importPath": "sitewise",
        "description": "sitewise",
        "isExtraImport": true,
        "detail": "sitewise",
        "documentation": {}
    },
    {
        "label": "SitewiseModelsCache",
        "importPath": "sitewise_models_cache",
        "description": "sitewise_models_cache",
        "isExtraImport": true,
        "detail": "sitewise_models_cache",
        "documentation": {}
    },
    {
        "label": "SitewiseModelsCache",
        "importPath": "sitewise_models_cache",
        "description": "sitewise_models_cache",
        "isExtraImport": true,
        "detail": "sitewise_models_cache",
        "documentation": {}
    },
    {
        "label": "SitewiseIntegrationPoints",
        "importPath": "sitewise_integration_points",
        "description": "sitewise_integration_points",
        "isExtraImport": true,
        "detail": "sitewise_integration_points",
        "documentation": {}
    },
    {
        "label": "SitewiseIntegrationPoints",
        "importPath": "sitewise_integration_points",
        "description": "sitewise_integration_points",
        "isExtraImport": true,
        "detail": "sitewise_integration_points",
        "documentation": {}
    },
    {
        "label": "SitewiseIntegrationPoints",
        "importPath": "sitewise_integration_points",
        "description": "sitewise_integration_points",
        "isExtraImport": true,
        "detail": "sitewise_integration_points",
        "documentation": {}
    },
    {
        "label": "AssetConverter",
        "importPath": "asset_converter",
        "description": "asset_converter",
        "isExtraImport": true,
        "detail": "asset_converter",
        "documentation": {}
    },
    {
        "label": "AssetConverter",
        "importPath": "asset_converter",
        "description": "asset_converter",
        "isExtraImport": true,
        "detail": "asset_converter",
        "documentation": {}
    },
    {
        "label": "ModelConverter",
        "importPath": "model_converter",
        "description": "model_converter",
        "isExtraImport": true,
        "detail": "model_converter",
        "documentation": {}
    },
    {
        "label": "ModelConverter",
        "importPath": "model_converter",
        "description": "model_converter",
        "isExtraImport": true,
        "detail": "model_converter",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "ClientError",
        "importPath": "botocore.exceptions",
        "description": "botocore.exceptions",
        "isExtraImport": true,
        "detail": "botocore.exceptions",
        "documentation": {}
    },
    {
        "label": "ClientError",
        "importPath": "botocore.exceptions",
        "description": "botocore.exceptions",
        "isExtraImport": true,
        "detail": "botocore.exceptions",
        "documentation": {}
    },
    {
        "label": "ClientError",
        "importPath": "botocore.exceptions",
        "description": "botocore.exceptions",
        "isExtraImport": true,
        "detail": "botocore.exceptions",
        "documentation": {}
    },
    {
        "label": "pdb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pdb",
        "description": "pdb",
        "detail": "pdb",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "mock",
        "description": "mock",
        "isExtraImport": true,
        "detail": "mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "mock",
        "description": "mock",
        "isExtraImport": true,
        "detail": "mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "mock",
        "description": "mock",
        "isExtraImport": true,
        "detail": "mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "mock",
        "description": "mock",
        "isExtraImport": true,
        "detail": "mock",
        "documentation": {}
    },
    {
        "label": "call",
        "importPath": "mock",
        "description": "mock",
        "isExtraImport": true,
        "detail": "mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "mock",
        "description": "mock",
        "isExtraImport": true,
        "detail": "mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "mock",
        "description": "mock",
        "isExtraImport": true,
        "detail": "mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "mock",
        "description": "mock",
        "isExtraImport": true,
        "detail": "mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "mock",
        "description": "mock",
        "isExtraImport": true,
        "detail": "mock",
        "documentation": {}
    },
    {
        "label": "call",
        "importPath": "mock",
        "description": "mock",
        "isExtraImport": true,
        "detail": "mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "mock",
        "description": "mock",
        "isExtraImport": true,
        "detail": "mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "mock",
        "description": "mock",
        "isExtraImport": true,
        "detail": "mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "mock",
        "description": "mock",
        "isExtraImport": true,
        "detail": "mock",
        "documentation": {}
    },
    {
        "label": "handler",
        "importPath": "handler",
        "description": "handler",
        "isExtraImport": true,
        "detail": "handler",
        "documentation": {}
    },
    {
        "label": "process_event",
        "importPath": "handler",
        "description": "handler",
        "isExtraImport": true,
        "detail": "handler",
        "documentation": {}
    },
    {
        "label": "handler",
        "importPath": "handler",
        "description": "handler",
        "isExtraImport": true,
        "detail": "handler",
        "documentation": {}
    },
    {
        "label": "get_cache_ids",
        "importPath": "handler",
        "description": "handler",
        "isExtraImport": true,
        "detail": "handler",
        "documentation": {}
    },
    {
        "label": "process_event",
        "importPath": "handler",
        "description": "handler",
        "isExtraImport": true,
        "detail": "handler",
        "documentation": {}
    },
    {
        "label": "SitewiseAsset",
        "importPath": "sitewise_asset",
        "description": "sitewise_asset",
        "isExtraImport": true,
        "detail": "sitewise_asset",
        "documentation": {}
    },
    {
        "label": "SitewiseAsset",
        "importPath": "sitewise_asset",
        "description": "sitewise_asset",
        "isExtraImport": true,
        "detail": "sitewise_asset",
        "documentation": {}
    },
    {
        "label": "AssociationConverter",
        "importPath": "association_converter",
        "description": "association_converter",
        "isExtraImport": true,
        "detail": "association_converter",
        "documentation": {}
    },
    {
        "label": "AssociationConverter",
        "importPath": "association_converter",
        "description": "association_converter",
        "isExtraImport": true,
        "detail": "association_converter",
        "documentation": {}
    },
    {
        "label": "AssociationConverter",
        "importPath": "association_converter",
        "description": "association_converter",
        "isExtraImport": true,
        "detail": "association_converter",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "jsonpath",
        "importPath": "jsonpath_ng",
        "description": "jsonpath_ng",
        "isExtraImport": true,
        "detail": "jsonpath_ng",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "jsonpath_ng",
        "description": "jsonpath_ng",
        "isExtraImport": true,
        "detail": "jsonpath_ng",
        "documentation": {}
    },
    {
        "label": "EventMappings",
        "importPath": "event_mappings",
        "description": "event_mappings",
        "isExtraImport": true,
        "detail": "event_mappings",
        "documentation": {}
    },
    {
        "label": "freeze_time",
        "importPath": "freezegun",
        "description": "freezegun",
        "isExtraImport": true,
        "detail": "freezegun",
        "documentation": {}
    },
    {
        "label": "unquote_plus",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "unquote_plus",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "unquote_plus",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "mock_sqs",
        "importPath": "moto",
        "description": "moto",
        "isExtraImport": true,
        "detail": "moto",
        "documentation": {}
    },
    {
        "label": "mock_s3",
        "importPath": "moto",
        "description": "moto",
        "isExtraImport": true,
        "detail": "moto",
        "documentation": {}
    },
    {
        "label": "mock_dynamodb2",
        "importPath": "moto",
        "description": "moto",
        "isExtraImport": true,
        "detail": "moto",
        "documentation": {}
    },
    {
        "label": "mock_s3",
        "importPath": "moto",
        "description": "moto",
        "isExtraImport": true,
        "detail": "moto",
        "documentation": {}
    },
    {
        "label": "mock_sqs",
        "importPath": "moto",
        "description": "moto",
        "isExtraImport": true,
        "detail": "moto",
        "documentation": {}
    },
    {
        "label": "AssetConverter",
        "kind": 6,
        "importPath": "functions.source.asset-model-converter.asset_converter",
        "description": "functions.source.asset-model-converter.asset_converter",
        "peekOfCode": "class AssetConverter:\n    \"\"\"\n    Converts UrbanIO Thing to SiteWise Assets\n    \"\"\"\n    def __init__(self, assets_cache, models_cache, sitewise_client):\n        self.assets_cache = assets_cache\n        self.models_cache = models_cache\n        self.sitewise_client = sitewise_client\n    def setup_asset(self, obj_type, external_id, name, model_name, hierarchy_name):\n        record_id = self.__dynamo_record_id(obj_type, external_id)",
        "detail": "functions.source.asset-model-converter.asset_converter",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "functions.source.asset-model-converter.asset_converter",
        "description": "functions.source.asset-model-converter.asset_converter",
        "peekOfCode": "logger = logging.getLogger()\nlogger.setLevel(getattr(logging, os.environ.get('LOG_LEVEL', 'INFO').upper()))\nclass AssetConverter:\n    \"\"\"\n    Converts UrbanIO Thing to SiteWise Assets\n    \"\"\"\n    def __init__(self, assets_cache, models_cache, sitewise_client):\n        self.assets_cache = assets_cache\n        self.models_cache = models_cache\n        self.sitewise_client = sitewise_client",
        "detail": "functions.source.asset-model-converter.asset_converter",
        "documentation": {}
    },
    {
        "label": "process_event",
        "kind": 2,
        "importPath": "functions.source.asset-model-converter.handler",
        "description": "functions.source.asset-model-converter.handler",
        "peekOfCode": "def process_event(event, integration_points):\n    if not event['type'] == 'lifecycle':\n        return None\n    asset = None\n    integration_point_ids = [integration['Id'] for integration in integration_points]\n    if event['reading']['et'] == 'model_updated':\n        model_converter.setup_model(event['reading']['asset_model'])\n    elif event['reading']['et'] == 'root_updated':\n        asset = asset_converter.setup_asset( \n            obj_type=\"root\",",
        "detail": "functions.source.asset-model-converter.handler",
        "documentation": {}
    },
    {
        "label": "handler",
        "kind": 2,
        "importPath": "functions.source.asset-model-converter.handler",
        "description": "functions.source.asset-model-converter.handler",
        "peekOfCode": "def handler(event, context):\n    logger.debug('event is {}'.format(event))\n    assets_to_associate = []\n    integration_points = integration_points_cache.get_all()\n    try:\n        for record in event['Records']:\n            lifecycle_event = json.loads(record[\"body\"])\n            logger.info(f\"lifecycle event: {lifecycle_event}\")\n            asset = process_event(lifecycle_event, integration_points)\n            if asset:",
        "detail": "functions.source.asset-model-converter.handler",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "functions.source.asset-model-converter.handler",
        "description": "functions.source.asset-model-converter.handler",
        "peekOfCode": "logger = logging.getLogger()\nlogger.setLevel(getattr(logging, os.environ.get(\"LOG_LEVEL\", \"INFO\").upper()))\nsitewise = Sitewise(os.environ['AWS_REGION'])\nassets_cache = SitewiseAssetsCache(os.environ['DYNAMO_ASSETS_TABLE_NAME'], os.environ['AWS_REGION'])\nmodels_cache = SitewiseModelsCache(os.environ['DYNAMO_MODELS_TABLE_NAME'], os.environ['AWS_REGION'])\nintegration_points_cache = SitewiseIntegrationPoints(os.environ['DYNAMO_INTEGRATION_POINTS_TABLE_NAME'], os.environ['AWS_REGION'])\nsqs = Sqs(os.environ['ASSETS_TO_ASSOCIATE_QUEUE_URL'], int(os.environ.get(\"BATCH_SIZE\", 10)), os.environ[\"AWS_REGION\"])\nasset_converter = AssetConverter(assets_cache, models_cache, sitewise)\nmodel_converter = ModelConverter(models_cache, sitewise)\ndef process_event(event, integration_points):",
        "detail": "functions.source.asset-model-converter.handler",
        "documentation": {}
    },
    {
        "label": "sitewise",
        "kind": 5,
        "importPath": "functions.source.asset-model-converter.handler",
        "description": "functions.source.asset-model-converter.handler",
        "peekOfCode": "sitewise = Sitewise(os.environ['AWS_REGION'])\nassets_cache = SitewiseAssetsCache(os.environ['DYNAMO_ASSETS_TABLE_NAME'], os.environ['AWS_REGION'])\nmodels_cache = SitewiseModelsCache(os.environ['DYNAMO_MODELS_TABLE_NAME'], os.environ['AWS_REGION'])\nintegration_points_cache = SitewiseIntegrationPoints(os.environ['DYNAMO_INTEGRATION_POINTS_TABLE_NAME'], os.environ['AWS_REGION'])\nsqs = Sqs(os.environ['ASSETS_TO_ASSOCIATE_QUEUE_URL'], int(os.environ.get(\"BATCH_SIZE\", 10)), os.environ[\"AWS_REGION\"])\nasset_converter = AssetConverter(assets_cache, models_cache, sitewise)\nmodel_converter = ModelConverter(models_cache, sitewise)\ndef process_event(event, integration_points):\n    if not event['type'] == 'lifecycle':\n        return None",
        "detail": "functions.source.asset-model-converter.handler",
        "documentation": {}
    },
    {
        "label": "assets_cache",
        "kind": 5,
        "importPath": "functions.source.asset-model-converter.handler",
        "description": "functions.source.asset-model-converter.handler",
        "peekOfCode": "assets_cache = SitewiseAssetsCache(os.environ['DYNAMO_ASSETS_TABLE_NAME'], os.environ['AWS_REGION'])\nmodels_cache = SitewiseModelsCache(os.environ['DYNAMO_MODELS_TABLE_NAME'], os.environ['AWS_REGION'])\nintegration_points_cache = SitewiseIntegrationPoints(os.environ['DYNAMO_INTEGRATION_POINTS_TABLE_NAME'], os.environ['AWS_REGION'])\nsqs = Sqs(os.environ['ASSETS_TO_ASSOCIATE_QUEUE_URL'], int(os.environ.get(\"BATCH_SIZE\", 10)), os.environ[\"AWS_REGION\"])\nasset_converter = AssetConverter(assets_cache, models_cache, sitewise)\nmodel_converter = ModelConverter(models_cache, sitewise)\ndef process_event(event, integration_points):\n    if not event['type'] == 'lifecycle':\n        return None\n    asset = None",
        "detail": "functions.source.asset-model-converter.handler",
        "documentation": {}
    },
    {
        "label": "models_cache",
        "kind": 5,
        "importPath": "functions.source.asset-model-converter.handler",
        "description": "functions.source.asset-model-converter.handler",
        "peekOfCode": "models_cache = SitewiseModelsCache(os.environ['DYNAMO_MODELS_TABLE_NAME'], os.environ['AWS_REGION'])\nintegration_points_cache = SitewiseIntegrationPoints(os.environ['DYNAMO_INTEGRATION_POINTS_TABLE_NAME'], os.environ['AWS_REGION'])\nsqs = Sqs(os.environ['ASSETS_TO_ASSOCIATE_QUEUE_URL'], int(os.environ.get(\"BATCH_SIZE\", 10)), os.environ[\"AWS_REGION\"])\nasset_converter = AssetConverter(assets_cache, models_cache, sitewise)\nmodel_converter = ModelConverter(models_cache, sitewise)\ndef process_event(event, integration_points):\n    if not event['type'] == 'lifecycle':\n        return None\n    asset = None\n    integration_point_ids = [integration['Id'] for integration in integration_points]",
        "detail": "functions.source.asset-model-converter.handler",
        "documentation": {}
    },
    {
        "label": "integration_points_cache",
        "kind": 5,
        "importPath": "functions.source.asset-model-converter.handler",
        "description": "functions.source.asset-model-converter.handler",
        "peekOfCode": "integration_points_cache = SitewiseIntegrationPoints(os.environ['DYNAMO_INTEGRATION_POINTS_TABLE_NAME'], os.environ['AWS_REGION'])\nsqs = Sqs(os.environ['ASSETS_TO_ASSOCIATE_QUEUE_URL'], int(os.environ.get(\"BATCH_SIZE\", 10)), os.environ[\"AWS_REGION\"])\nasset_converter = AssetConverter(assets_cache, models_cache, sitewise)\nmodel_converter = ModelConverter(models_cache, sitewise)\ndef process_event(event, integration_points):\n    if not event['type'] == 'lifecycle':\n        return None\n    asset = None\n    integration_point_ids = [integration['Id'] for integration in integration_points]\n    if event['reading']['et'] == 'model_updated':",
        "detail": "functions.source.asset-model-converter.handler",
        "documentation": {}
    },
    {
        "label": "sqs",
        "kind": 5,
        "importPath": "functions.source.asset-model-converter.handler",
        "description": "functions.source.asset-model-converter.handler",
        "peekOfCode": "sqs = Sqs(os.environ['ASSETS_TO_ASSOCIATE_QUEUE_URL'], int(os.environ.get(\"BATCH_SIZE\", 10)), os.environ[\"AWS_REGION\"])\nasset_converter = AssetConverter(assets_cache, models_cache, sitewise)\nmodel_converter = ModelConverter(models_cache, sitewise)\ndef process_event(event, integration_points):\n    if not event['type'] == 'lifecycle':\n        return None\n    asset = None\n    integration_point_ids = [integration['Id'] for integration in integration_points]\n    if event['reading']['et'] == 'model_updated':\n        model_converter.setup_model(event['reading']['asset_model'])",
        "detail": "functions.source.asset-model-converter.handler",
        "documentation": {}
    },
    {
        "label": "asset_converter",
        "kind": 5,
        "importPath": "functions.source.asset-model-converter.handler",
        "description": "functions.source.asset-model-converter.handler",
        "peekOfCode": "asset_converter = AssetConverter(assets_cache, models_cache, sitewise)\nmodel_converter = ModelConverter(models_cache, sitewise)\ndef process_event(event, integration_points):\n    if not event['type'] == 'lifecycle':\n        return None\n    asset = None\n    integration_point_ids = [integration['Id'] for integration in integration_points]\n    if event['reading']['et'] == 'model_updated':\n        model_converter.setup_model(event['reading']['asset_model'])\n    elif event['reading']['et'] == 'root_updated':",
        "detail": "functions.source.asset-model-converter.handler",
        "documentation": {}
    },
    {
        "label": "model_converter",
        "kind": 5,
        "importPath": "functions.source.asset-model-converter.handler",
        "description": "functions.source.asset-model-converter.handler",
        "peekOfCode": "model_converter = ModelConverter(models_cache, sitewise)\ndef process_event(event, integration_points):\n    if not event['type'] == 'lifecycle':\n        return None\n    asset = None\n    integration_point_ids = [integration['Id'] for integration in integration_points]\n    if event['reading']['et'] == 'model_updated':\n        model_converter.setup_model(event['reading']['asset_model'])\n    elif event['reading']['et'] == 'root_updated':\n        asset = asset_converter.setup_asset( ",
        "detail": "functions.source.asset-model-converter.handler",
        "documentation": {}
    },
    {
        "label": "ModelConverter",
        "kind": 6,
        "importPath": "functions.source.asset-model-converter.model_converter",
        "description": "functions.source.asset-model-converter.model_converter",
        "peekOfCode": "class ModelConverter:\n    def __init__(self, models_cache, sitewise_client):\n        self.models_dynamo = models_cache\n        self.sitewise_client = sitewise_client\n    def setup_model(self, model_description):\n        models = {item['Name']:item for item in self.models_dynamo.get_all()}\n        cached_model = models.get(model_description['assetModelName'])\n        if cached_model is None:\n            hierarchies = []\n            if 'assetModelHierarchies' in model_description:",
        "detail": "functions.source.asset-model-converter.model_converter",
        "documentation": {}
    },
    {
        "label": "Sitewise",
        "kind": 6,
        "importPath": "functions.source.asset-model-converter.sitewise",
        "description": "functions.source.asset-model-converter.sitewise",
        "peekOfCode": "class Sitewise:\n    \"\"\"\n    Interactions with sitewise assets and models - creation, updating, and deletion.\n    \"\"\"\n    def __init__(self, aws_region=os.environ.get(\"AWS_REGION\")):\n        self.aws_region = aws_region\n        self.sitewise = boto3.client('iotsitewise', region_name=self.aws_region)\n        self.pollWaitTime = 0.5\n    def create_asset(self, assetName, assetModelId):\n        logger.info(f\"Creating asset {assetName}\")",
        "detail": "functions.source.asset-model-converter.sitewise",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "functions.source.asset-model-converter.sitewise",
        "description": "functions.source.asset-model-converter.sitewise",
        "peekOfCode": "logger = logging.getLogger()\nlogger.setLevel(getattr(logging, os.environ.get(\"LOG_LEVEL\", \"INFO\").upper()))\nclass Sitewise:\n    \"\"\"\n    Interactions with sitewise assets and models - creation, updating, and deletion.\n    \"\"\"\n    def __init__(self, aws_region=os.environ.get(\"AWS_REGION\")):\n        self.aws_region = aws_region\n        self.sitewise = boto3.client('iotsitewise', region_name=self.aws_region)\n        self.pollWaitTime = 0.5",
        "detail": "functions.source.asset-model-converter.sitewise",
        "documentation": {}
    },
    {
        "label": "SitewiseAssetsCache",
        "kind": 6,
        "importPath": "functions.source.asset-model-converter.sitewise_assets_cache",
        "description": "functions.source.asset-model-converter.sitewise_assets_cache",
        "peekOfCode": "class SitewiseAssetsCache:\n    \"\"\"\n    Interactions with dynamo table - saving and retrieving information\n    \"\"\"\n    def __init__(self, table_name=os.environ.get(\"DYNAMO_ASSETS_TABLE_NAME\"), aws_region=os.environ.get(\"AWS_REGION\")):\n        self.table_name = table_name\n        self.aws_region = aws_region\n        self.dynamodb = boto3.resource('dynamodb', region_name=self.aws_region)\n        self.table = self.dynamodb.Table(self.table_name)\n    def get(self, record_id):",
        "detail": "functions.source.asset-model-converter.sitewise_assets_cache",
        "documentation": {}
    },
    {
        "label": "SitewiseIntegrationPoints",
        "kind": 6,
        "importPath": "functions.source.asset-model-converter.sitewise_integration_points",
        "description": "functions.source.asset-model-converter.sitewise_integration_points",
        "peekOfCode": "class SitewiseIntegrationPoints:\n    \"\"\"\n    Interactions with dynamo table - saving and retrieving information\n    \"\"\"\n    def __init__(self, table_name=os.environ.get(\"DYNAMO_INTEGRATION_POINTS_TABLE_NAME\"), aws_region=os.environ.get(\"AWS_REGION\")):\n        self.table_name = table_name\n        self.aws_region = aws_region\n        self.dynamodb = boto3.resource('dynamodb', region_name=self.aws_region)\n        self.table = self.dynamodb.Table(self.table_name)\n    def get(self, record_id):",
        "detail": "functions.source.asset-model-converter.sitewise_integration_points",
        "documentation": {}
    },
    {
        "label": "SitewiseModelsCache",
        "kind": 6,
        "importPath": "functions.source.asset-model-converter.sitewise_models_cache",
        "description": "functions.source.asset-model-converter.sitewise_models_cache",
        "peekOfCode": "class SitewiseModelsCache:\n    \"\"\"\n    Interactions with dynamo table - saving and retrieving information\n    \"\"\"\n    def __init__(self, table_name=os.environ.get(\"DYNAMO_MODELS_TABLE_NAME\"), aws_region=os.environ.get(\"AWS_REGION\")):\n        self.table_name = table_name\n        self.aws_region = aws_region\n        self.dynamodb = boto3.resource('dynamodb', region_name=self.aws_region)\n        self.table = self.dynamodb.Table(self.table_name)\n    def get(self, record_id):",
        "detail": "functions.source.asset-model-converter.sitewise_models_cache",
        "documentation": {}
    },
    {
        "label": "Sqs",
        "kind": 6,
        "importPath": "functions.source.asset-model-converter.sqs",
        "description": "functions.source.asset-model-converter.sqs",
        "peekOfCode": "class Sqs:\n    def __init__(self, queue_url=os.environ['ASSETS_TO_ASSOCIATE_QUEUE_URL'], batch_size=int(os.environ.get(\"BATCH_SIZE\", 10)), aws_region=os.environ.get(\"AWS_REGION\")):\n        self.queue_url =queue_url\n        self.batch_size =batch_size\n        self.aws_region = aws_region\n        self.sqs_client = boto3.client('sqs', region_name=self.aws_region)\n    def send_messages(self, messages):\n        for i in range(0, len(messages), self.batch_size):\n            messages_chunk = list(messages)[i:i + self.batch_size]   \n            entries = [{'Id': str(idx), 'MessageBody': json.dumps(msg), 'MessageGroupId': 'lifecycle_events'} for idx,msg in enumerate(messages_chunk)] ",
        "detail": "functions.source.asset-model-converter.sqs",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "functions.source.asset-model-converter.sqs",
        "description": "functions.source.asset-model-converter.sqs",
        "peekOfCode": "logger = logging.getLogger()\nlogger.setLevel(getattr(logging, os.environ.get(\"LOG_LEVEL\", \"INFO\").upper()))\nclass Sqs:\n    def __init__(self, queue_url=os.environ['ASSETS_TO_ASSOCIATE_QUEUE_URL'], batch_size=int(os.environ.get(\"BATCH_SIZE\", 10)), aws_region=os.environ.get(\"AWS_REGION\")):\n        self.queue_url =queue_url\n        self.batch_size =batch_size\n        self.aws_region = aws_region\n        self.sqs_client = boto3.client('sqs', region_name=self.aws_region)\n    def send_messages(self, messages):\n        for i in range(0, len(messages), self.batch_size):",
        "detail": "functions.source.asset-model-converter.sqs",
        "documentation": {}
    },
    {
        "label": "MockSitewise",
        "kind": 6,
        "importPath": "functions.source.asset-model-converter.test_handler",
        "description": "functions.source.asset-model-converter.test_handler",
        "peekOfCode": "class MockSitewise(Mock):\n    def __init__(self, *, aws_region=os.environ.get(\"AWS_REGION\")):\n        super(MockSitewise, self).__init__()\n        self.assets = {}\n        self.models = {}\n    def create_asset(self, assetName, assetModelId):\n        uid = str(uuid.uuid4())\n        self.assets[uid] = {\n            \"assetId\": uid,\n            \"assetName\": assetName,",
        "detail": "functions.source.asset-model-converter.test_handler",
        "documentation": {}
    },
    {
        "label": "MockSitewiseModelsCache",
        "kind": 6,
        "importPath": "functions.source.asset-model-converter.test_handler",
        "description": "functions.source.asset-model-converter.test_handler",
        "peekOfCode": "class MockSitewiseModelsCache(Mock):\n    def __init__(self, *, table_name=os.environ.get(\"DYNAMO_MODELS_TABLE_NAME\"), aws_region=os.environ.get(\"AWS_REGION\")):\n        super(MockSitewiseModelsCache, self).__init__()\n        self.models_cache = {}\n    def get(self, record_id):\n        return self.models_cache.get(record_id)\n    def get_model_id(self, record_id):\n        return self.models_cache.get(record_id)[\"AssetModelId\"]\n    def get_all(self):\n        return self.models_cache.values()",
        "detail": "functions.source.asset-model-converter.test_handler",
        "documentation": {}
    },
    {
        "label": "MockSitewiseAssetsCache",
        "kind": 6,
        "importPath": "functions.source.asset-model-converter.test_handler",
        "description": "functions.source.asset-model-converter.test_handler",
        "peekOfCode": "class MockSitewiseAssetsCache(Mock):\n    def __init__(self, *, table_name=os.environ.get(\"DYNAMO_ASSETS_TABLE_NAME\"), aws_region=os.environ.get(\"AWS_REGION\")):\n        super(MockSitewiseAssetsCache, self).__init__()\n        self.assets_cache = {}\n    def get(self, record_id):\n        return self.assets_cache.get(record_id)\n    def save(self, item):\n        self.assets_cache[item[\"Id\"]] = item\nclass MockSitewiseIntegrationPoints(Mock):\n    def __init__(self, *, table_name=os.environ.get(\"DYNAMO_INTEGRATION_POINTS_TABLE_NAME\"), aws_region=os.environ.get(\"AWS_REGION\")):",
        "detail": "functions.source.asset-model-converter.test_handler",
        "documentation": {}
    },
    {
        "label": "MockSitewiseIntegrationPoints",
        "kind": 6,
        "importPath": "functions.source.asset-model-converter.test_handler",
        "description": "functions.source.asset-model-converter.test_handler",
        "peekOfCode": "class MockSitewiseIntegrationPoints(Mock):\n    def __init__(self, *, table_name=os.environ.get(\"DYNAMO_INTEGRATION_POINTS_TABLE_NAME\"), aws_region=os.environ.get(\"AWS_REGION\")):\n        super(MockSitewiseIntegrationPoints, self).__init__()\n        self.integration_points = {}\n    def get(self, record_id):\n        return self.integration_points.get(record_id)\n    def get_all(self):\n        return self.integration_points.values()\n    def save(self, item):\n        self.integration_points[item[\"Id\"]] = {",
        "detail": "functions.source.asset-model-converter.test_handler",
        "documentation": {}
    },
    {
        "label": "test_handler",
        "kind": 2,
        "importPath": "functions.source.asset-model-converter.test_handler",
        "description": "functions.source.asset-model-converter.test_handler",
        "peekOfCode": "def test_handler():\n    readings = json.loads(open('data/test.json').read())\n    sqs_msgs = [{'body': json.dumps(msg)} for msg in readings]\n    event = {\n        \"Records\" : sqs_msgs\n    }\n    handler(event, {})\ndef test_get_cache_ids():\n    pass",
        "detail": "functions.source.asset-model-converter.test_handler",
        "documentation": {}
    },
    {
        "label": "test_get_cache_ids",
        "kind": 2,
        "importPath": "functions.source.asset-model-converter.test_handler",
        "description": "functions.source.asset-model-converter.test_handler",
        "peekOfCode": "def test_get_cache_ids():\n    pass",
        "detail": "functions.source.asset-model-converter.test_handler",
        "documentation": {}
    },
    {
        "label": "os.environ['ASSETS_TO_ASSOCIATE_QUEUE_URL']",
        "kind": 5,
        "importPath": "functions.source.asset-model-converter.test_handler",
        "description": "functions.source.asset-model-converter.test_handler",
        "peekOfCode": "os.environ['ASSETS_TO_ASSOCIATE_QUEUE_URL'] = 'test.fifo'\nos.environ['DYNAMO_ASSETS_TABLE_NAME'] = 'assets'\nos.environ['DYNAMO_MODELS_TABLE_NAME'] = 'models'\nos.environ['DYNAMO_INTEGRATION_POINTS_TABLE_NAME'] = 'integration_points'\nos.environ['AWS_REGION'] = 'us-east-1'\nfrom handler import handler, process_event\nfrom asset_converter import AssetConverter\nfrom model_converter import ModelConverter\nclass MockSitewise(Mock):\n    def __init__(self, *, aws_region=os.environ.get(\"AWS_REGION\")):",
        "detail": "functions.source.asset-model-converter.test_handler",
        "documentation": {}
    },
    {
        "label": "os.environ['DYNAMO_ASSETS_TABLE_NAME']",
        "kind": 5,
        "importPath": "functions.source.asset-model-converter.test_handler",
        "description": "functions.source.asset-model-converter.test_handler",
        "peekOfCode": "os.environ['DYNAMO_ASSETS_TABLE_NAME'] = 'assets'\nos.environ['DYNAMO_MODELS_TABLE_NAME'] = 'models'\nos.environ['DYNAMO_INTEGRATION_POINTS_TABLE_NAME'] = 'integration_points'\nos.environ['AWS_REGION'] = 'us-east-1'\nfrom handler import handler, process_event\nfrom asset_converter import AssetConverter\nfrom model_converter import ModelConverter\nclass MockSitewise(Mock):\n    def __init__(self, *, aws_region=os.environ.get(\"AWS_REGION\")):\n        super(MockSitewise, self).__init__()",
        "detail": "functions.source.asset-model-converter.test_handler",
        "documentation": {}
    },
    {
        "label": "os.environ['DYNAMO_MODELS_TABLE_NAME']",
        "kind": 5,
        "importPath": "functions.source.asset-model-converter.test_handler",
        "description": "functions.source.asset-model-converter.test_handler",
        "peekOfCode": "os.environ['DYNAMO_MODELS_TABLE_NAME'] = 'models'\nos.environ['DYNAMO_INTEGRATION_POINTS_TABLE_NAME'] = 'integration_points'\nos.environ['AWS_REGION'] = 'us-east-1'\nfrom handler import handler, process_event\nfrom asset_converter import AssetConverter\nfrom model_converter import ModelConverter\nclass MockSitewise(Mock):\n    def __init__(self, *, aws_region=os.environ.get(\"AWS_REGION\")):\n        super(MockSitewise, self).__init__()\n        self.assets = {}",
        "detail": "functions.source.asset-model-converter.test_handler",
        "documentation": {}
    },
    {
        "label": "os.environ['DYNAMO_INTEGRATION_POINTS_TABLE_NAME']",
        "kind": 5,
        "importPath": "functions.source.asset-model-converter.test_handler",
        "description": "functions.source.asset-model-converter.test_handler",
        "peekOfCode": "os.environ['DYNAMO_INTEGRATION_POINTS_TABLE_NAME'] = 'integration_points'\nos.environ['AWS_REGION'] = 'us-east-1'\nfrom handler import handler, process_event\nfrom asset_converter import AssetConverter\nfrom model_converter import ModelConverter\nclass MockSitewise(Mock):\n    def __init__(self, *, aws_region=os.environ.get(\"AWS_REGION\")):\n        super(MockSitewise, self).__init__()\n        self.assets = {}\n        self.models = {}",
        "detail": "functions.source.asset-model-converter.test_handler",
        "documentation": {}
    },
    {
        "label": "os.environ['AWS_REGION']",
        "kind": 5,
        "importPath": "functions.source.asset-model-converter.test_handler",
        "description": "functions.source.asset-model-converter.test_handler",
        "peekOfCode": "os.environ['AWS_REGION'] = 'us-east-1'\nfrom handler import handler, process_event\nfrom asset_converter import AssetConverter\nfrom model_converter import ModelConverter\nclass MockSitewise(Mock):\n    def __init__(self, *, aws_region=os.environ.get(\"AWS_REGION\")):\n        super(MockSitewise, self).__init__()\n        self.assets = {}\n        self.models = {}\n    def create_asset(self, assetName, assetModelId):",
        "detail": "functions.source.asset-model-converter.test_handler",
        "documentation": {}
    },
    {
        "label": "mock_assets_cache",
        "kind": 5,
        "importPath": "functions.source.asset-model-converter.test_handler",
        "description": "functions.source.asset-model-converter.test_handler",
        "peekOfCode": "mock_assets_cache = MockSitewiseAssetsCache()\nmock_models_cache = MockSitewiseModelsCache()\nmock_integration_points_cache = MockSitewiseIntegrationPoints()\nmock_sitewise = MockSitewise()\nmock_sqs = Mock()\nmock_sqs.send_messages = Mock()\nasset_converter = AssetConverter(mock_assets_cache, mock_models_cache, mock_sitewise)\nmodel_converter = ModelConverter(mock_models_cache, mock_sitewise)\n@patch(\"handler.sqs\", mock_sqs)\n@patch(\"handler.sitewise\", mock_sitewise)",
        "detail": "functions.source.asset-model-converter.test_handler",
        "documentation": {}
    },
    {
        "label": "mock_models_cache",
        "kind": 5,
        "importPath": "functions.source.asset-model-converter.test_handler",
        "description": "functions.source.asset-model-converter.test_handler",
        "peekOfCode": "mock_models_cache = MockSitewiseModelsCache()\nmock_integration_points_cache = MockSitewiseIntegrationPoints()\nmock_sitewise = MockSitewise()\nmock_sqs = Mock()\nmock_sqs.send_messages = Mock()\nasset_converter = AssetConverter(mock_assets_cache, mock_models_cache, mock_sitewise)\nmodel_converter = ModelConverter(mock_models_cache, mock_sitewise)\n@patch(\"handler.sqs\", mock_sqs)\n@patch(\"handler.sitewise\", mock_sitewise)\n@patch(\"handler.assets_cache\", mock_assets_cache)",
        "detail": "functions.source.asset-model-converter.test_handler",
        "documentation": {}
    },
    {
        "label": "mock_integration_points_cache",
        "kind": 5,
        "importPath": "functions.source.asset-model-converter.test_handler",
        "description": "functions.source.asset-model-converter.test_handler",
        "peekOfCode": "mock_integration_points_cache = MockSitewiseIntegrationPoints()\nmock_sitewise = MockSitewise()\nmock_sqs = Mock()\nmock_sqs.send_messages = Mock()\nasset_converter = AssetConverter(mock_assets_cache, mock_models_cache, mock_sitewise)\nmodel_converter = ModelConverter(mock_models_cache, mock_sitewise)\n@patch(\"handler.sqs\", mock_sqs)\n@patch(\"handler.sitewise\", mock_sitewise)\n@patch(\"handler.assets_cache\", mock_assets_cache)\n@patch(\"handler.models_cache\", mock_models_cache)",
        "detail": "functions.source.asset-model-converter.test_handler",
        "documentation": {}
    },
    {
        "label": "mock_sitewise",
        "kind": 5,
        "importPath": "functions.source.asset-model-converter.test_handler",
        "description": "functions.source.asset-model-converter.test_handler",
        "peekOfCode": "mock_sitewise = MockSitewise()\nmock_sqs = Mock()\nmock_sqs.send_messages = Mock()\nasset_converter = AssetConverter(mock_assets_cache, mock_models_cache, mock_sitewise)\nmodel_converter = ModelConverter(mock_models_cache, mock_sitewise)\n@patch(\"handler.sqs\", mock_sqs)\n@patch(\"handler.sitewise\", mock_sitewise)\n@patch(\"handler.assets_cache\", mock_assets_cache)\n@patch(\"handler.models_cache\", mock_models_cache)\n@patch(\"handler.asset_converter\", asset_converter)",
        "detail": "functions.source.asset-model-converter.test_handler",
        "documentation": {}
    },
    {
        "label": "mock_sqs",
        "kind": 5,
        "importPath": "functions.source.asset-model-converter.test_handler",
        "description": "functions.source.asset-model-converter.test_handler",
        "peekOfCode": "mock_sqs = Mock()\nmock_sqs.send_messages = Mock()\nasset_converter = AssetConverter(mock_assets_cache, mock_models_cache, mock_sitewise)\nmodel_converter = ModelConverter(mock_models_cache, mock_sitewise)\n@patch(\"handler.sqs\", mock_sqs)\n@patch(\"handler.sitewise\", mock_sitewise)\n@patch(\"handler.assets_cache\", mock_assets_cache)\n@patch(\"handler.models_cache\", mock_models_cache)\n@patch(\"handler.asset_converter\", asset_converter)\n@patch(\"handler.model_converter\", model_converter)",
        "detail": "functions.source.asset-model-converter.test_handler",
        "documentation": {}
    },
    {
        "label": "mock_sqs.send_messages",
        "kind": 5,
        "importPath": "functions.source.asset-model-converter.test_handler",
        "description": "functions.source.asset-model-converter.test_handler",
        "peekOfCode": "mock_sqs.send_messages = Mock()\nasset_converter = AssetConverter(mock_assets_cache, mock_models_cache, mock_sitewise)\nmodel_converter = ModelConverter(mock_models_cache, mock_sitewise)\n@patch(\"handler.sqs\", mock_sqs)\n@patch(\"handler.sitewise\", mock_sitewise)\n@patch(\"handler.assets_cache\", mock_assets_cache)\n@patch(\"handler.models_cache\", mock_models_cache)\n@patch(\"handler.asset_converter\", asset_converter)\n@patch(\"handler.model_converter\", model_converter)\n@patch(\"handler.integration_points_cache\", mock_integration_points_cache)",
        "detail": "functions.source.asset-model-converter.test_handler",
        "documentation": {}
    },
    {
        "label": "asset_converter",
        "kind": 5,
        "importPath": "functions.source.asset-model-converter.test_handler",
        "description": "functions.source.asset-model-converter.test_handler",
        "peekOfCode": "asset_converter = AssetConverter(mock_assets_cache, mock_models_cache, mock_sitewise)\nmodel_converter = ModelConverter(mock_models_cache, mock_sitewise)\n@patch(\"handler.sqs\", mock_sqs)\n@patch(\"handler.sitewise\", mock_sitewise)\n@patch(\"handler.assets_cache\", mock_assets_cache)\n@patch(\"handler.models_cache\", mock_models_cache)\n@patch(\"handler.asset_converter\", asset_converter)\n@patch(\"handler.model_converter\", model_converter)\n@patch(\"handler.integration_points_cache\", mock_integration_points_cache)\ndef test_handler():",
        "detail": "functions.source.asset-model-converter.test_handler",
        "documentation": {}
    },
    {
        "label": "model_converter",
        "kind": 5,
        "importPath": "functions.source.asset-model-converter.test_handler",
        "description": "functions.source.asset-model-converter.test_handler",
        "peekOfCode": "model_converter = ModelConverter(mock_models_cache, mock_sitewise)\n@patch(\"handler.sqs\", mock_sqs)\n@patch(\"handler.sitewise\", mock_sitewise)\n@patch(\"handler.assets_cache\", mock_assets_cache)\n@patch(\"handler.models_cache\", mock_models_cache)\n@patch(\"handler.asset_converter\", asset_converter)\n@patch(\"handler.model_converter\", model_converter)\n@patch(\"handler.integration_points_cache\", mock_integration_points_cache)\ndef test_handler():\n    readings = json.loads(open('data/test.json').read())",
        "detail": "functions.source.asset-model-converter.test_handler",
        "documentation": {}
    },
    {
        "label": "AssociationConverter",
        "kind": 6,
        "importPath": "functions.source.association-updater.association_converter",
        "description": "functions.source.association-updater.association_converter",
        "peekOfCode": "class AssociationConverter(object):\n    \"\"\"Updates asset associations\"\"\"\n    def __init__(self, assets_cache, sitewise_client):\n        self.assets_cache = assets_cache\n        self.sitewise_client = sitewise_client\n    def associate_asset(self, asset_cache, child_asset_cache):\n        if asset_cache is None:\n            logger.error(f\"No parent asset found for {child_asset_cache.get('Id')}\")\n            return None\n        if asset_cache.get('AssetId') != child_asset_cache.get('ParentAssetId'):",
        "detail": "functions.source.association-updater.association_converter",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "functions.source.association-updater.association_converter",
        "description": "functions.source.association-updater.association_converter",
        "peekOfCode": "logger = logging.getLogger()\nlogger.setLevel(getattr(logging, os.environ.get('LOG_LEVEL', 'INFO').upper()))\nclass AssociationConverter(object):\n    \"\"\"Updates asset associations\"\"\"\n    def __init__(self, assets_cache, sitewise_client):\n        self.assets_cache = assets_cache\n        self.sitewise_client = sitewise_client\n    def associate_asset(self, asset_cache, child_asset_cache):\n        if asset_cache is None:\n            logger.error(f\"No parent asset found for {child_asset_cache.get('Id')}\")",
        "detail": "functions.source.association-updater.association_converter",
        "documentation": {}
    },
    {
        "label": "get_cache_ids",
        "kind": 2,
        "importPath": "functions.source.association-updater.handler",
        "description": "functions.source.association-updater.handler",
        "peekOfCode": "def get_cache_ids(event, integration_points):\n    if not event['type'] == 'lifecycle':\n        return\n    if event['reading']['et'] == 'operator_updated':\n        return {   \n            'child': f\"operator-{event['reading']['id']}\", \n            'parent': 'root-urban.io'\n        }\n    elif event['reading']['et'] == 'customer_updated':\n        parent_operators = [integration for integration in integration_points if integration['Id'] in event['metadata']['ref']['o']]",
        "detail": "functions.source.association-updater.handler",
        "documentation": {}
    },
    {
        "label": "process_event",
        "kind": 2,
        "importPath": "functions.source.association-updater.handler",
        "description": "functions.source.association-updater.handler",
        "peekOfCode": "def process_event(event, integration_points):\n    cache_ids = get_cache_ids(event, integration_points)\n    if cache_ids and cache_ids.get('child') and cache_ids.get('parent'):\n        child_asset = assets_cache.get(cache_ids.get('child'))\n        parent_asset = assets_cache.get(cache_ids.get('parent'))\n        if child_asset is None:\n            logger.warn(f\"Asset with id={cache_ids.get('child')} isn't found.\")\n            return\n        if parent_asset is None:\n            logger.error(f\"No parent asset with id={cache_ids.get('parent')} found for {cache_ids.get('child')}\")",
        "detail": "functions.source.association-updater.handler",
        "documentation": {}
    },
    {
        "label": "handler",
        "kind": 2,
        "importPath": "functions.source.association-updater.handler",
        "description": "functions.source.association-updater.handler",
        "peekOfCode": "def handler(event, context):\n    logger.debug('event is {}'.format(event))\n    assets_to_update = []\n    integration_points = integration_points_cache.get_all()\n    try:\n        for record in event['Records']:\n            # Batch by 10\n            lifecycle_event = json.loads(record[\"body\"])\n            logger.info(f\"Message: {lifecycle_event}\")\n            process_event(lifecycle_event, integration_points)",
        "detail": "functions.source.association-updater.handler",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "functions.source.association-updater.handler",
        "description": "functions.source.association-updater.handler",
        "peekOfCode": "logger = logging.getLogger()\nlogger.setLevel(getattr(logging, os.environ.get(\"LOG_LEVEL\", \"INFO\").upper()))\nassets_cache = SitewiseAssetsCache(os.environ['DYNAMO_ASSETS_TABLE_NAME'], os.environ['AWS_REGION'])\nintegration_points_cache = SitewiseIntegrationPoints(os.environ['DYNAMO_INTEGRATION_POINTS_TABLE_NAME'], os.environ['AWS_REGION'])\nsitewise = SitewiseAsset()\nsqs = Sqs(os.environ['ASSETS_TO_UPDATE_QUEUE_URL'], int(os.environ.get(\"BATCH_SIZE\", 10)), os.environ[\"AWS_REGION\"])\nassociation_converter = AssociationConverter(assets_cache, sitewise)\ndef get_cache_ids(event, integration_points):\n    if not event['type'] == 'lifecycle':\n        return",
        "detail": "functions.source.association-updater.handler",
        "documentation": {}
    },
    {
        "label": "assets_cache",
        "kind": 5,
        "importPath": "functions.source.association-updater.handler",
        "description": "functions.source.association-updater.handler",
        "peekOfCode": "assets_cache = SitewiseAssetsCache(os.environ['DYNAMO_ASSETS_TABLE_NAME'], os.environ['AWS_REGION'])\nintegration_points_cache = SitewiseIntegrationPoints(os.environ['DYNAMO_INTEGRATION_POINTS_TABLE_NAME'], os.environ['AWS_REGION'])\nsitewise = SitewiseAsset()\nsqs = Sqs(os.environ['ASSETS_TO_UPDATE_QUEUE_URL'], int(os.environ.get(\"BATCH_SIZE\", 10)), os.environ[\"AWS_REGION\"])\nassociation_converter = AssociationConverter(assets_cache, sitewise)\ndef get_cache_ids(event, integration_points):\n    if not event['type'] == 'lifecycle':\n        return\n    if event['reading']['et'] == 'operator_updated':\n        return {   ",
        "detail": "functions.source.association-updater.handler",
        "documentation": {}
    },
    {
        "label": "integration_points_cache",
        "kind": 5,
        "importPath": "functions.source.association-updater.handler",
        "description": "functions.source.association-updater.handler",
        "peekOfCode": "integration_points_cache = SitewiseIntegrationPoints(os.environ['DYNAMO_INTEGRATION_POINTS_TABLE_NAME'], os.environ['AWS_REGION'])\nsitewise = SitewiseAsset()\nsqs = Sqs(os.environ['ASSETS_TO_UPDATE_QUEUE_URL'], int(os.environ.get(\"BATCH_SIZE\", 10)), os.environ[\"AWS_REGION\"])\nassociation_converter = AssociationConverter(assets_cache, sitewise)\ndef get_cache_ids(event, integration_points):\n    if not event['type'] == 'lifecycle':\n        return\n    if event['reading']['et'] == 'operator_updated':\n        return {   \n            'child': f\"operator-{event['reading']['id']}\", ",
        "detail": "functions.source.association-updater.handler",
        "documentation": {}
    },
    {
        "label": "sitewise",
        "kind": 5,
        "importPath": "functions.source.association-updater.handler",
        "description": "functions.source.association-updater.handler",
        "peekOfCode": "sitewise = SitewiseAsset()\nsqs = Sqs(os.environ['ASSETS_TO_UPDATE_QUEUE_URL'], int(os.environ.get(\"BATCH_SIZE\", 10)), os.environ[\"AWS_REGION\"])\nassociation_converter = AssociationConverter(assets_cache, sitewise)\ndef get_cache_ids(event, integration_points):\n    if not event['type'] == 'lifecycle':\n        return\n    if event['reading']['et'] == 'operator_updated':\n        return {   \n            'child': f\"operator-{event['reading']['id']}\", \n            'parent': 'root-urban.io'",
        "detail": "functions.source.association-updater.handler",
        "documentation": {}
    },
    {
        "label": "sqs",
        "kind": 5,
        "importPath": "functions.source.association-updater.handler",
        "description": "functions.source.association-updater.handler",
        "peekOfCode": "sqs = Sqs(os.environ['ASSETS_TO_UPDATE_QUEUE_URL'], int(os.environ.get(\"BATCH_SIZE\", 10)), os.environ[\"AWS_REGION\"])\nassociation_converter = AssociationConverter(assets_cache, sitewise)\ndef get_cache_ids(event, integration_points):\n    if not event['type'] == 'lifecycle':\n        return\n    if event['reading']['et'] == 'operator_updated':\n        return {   \n            'child': f\"operator-{event['reading']['id']}\", \n            'parent': 'root-urban.io'\n        }",
        "detail": "functions.source.association-updater.handler",
        "documentation": {}
    },
    {
        "label": "association_converter",
        "kind": 5,
        "importPath": "functions.source.association-updater.handler",
        "description": "functions.source.association-updater.handler",
        "peekOfCode": "association_converter = AssociationConverter(assets_cache, sitewise)\ndef get_cache_ids(event, integration_points):\n    if not event['type'] == 'lifecycle':\n        return\n    if event['reading']['et'] == 'operator_updated':\n        return {   \n            'child': f\"operator-{event['reading']['id']}\", \n            'parent': 'root-urban.io'\n        }\n    elif event['reading']['et'] == 'customer_updated':",
        "detail": "functions.source.association-updater.handler",
        "documentation": {}
    },
    {
        "label": "SitewiseAsset",
        "kind": 6,
        "importPath": "functions.source.association-updater.sitewise_asset",
        "description": "functions.source.association-updater.sitewise_asset",
        "peekOfCode": "class SitewiseAsset:\n    \"\"\"\n    Interactions with sitewise asset - updates attributes values\n    \"\"\"\n    def __init__(self, aws_region=os.environ.get(\"AWS_REGION\")):\n        self.aws_region = aws_region\n        self.sitewise = boto3.client('iotsitewise', region_name=self.aws_region)\n        self.pollWaitTime = 0.5\n    def describe(self, assetId):\n        return  self.sitewise.describe_asset(assetId=assetId)",
        "detail": "functions.source.association-updater.sitewise_asset",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "functions.source.association-updater.sitewise_asset",
        "description": "functions.source.association-updater.sitewise_asset",
        "peekOfCode": "logger = logging.getLogger()\nlogger.setLevel(getattr(logging, os.environ.get(\"LOG_LEVEL\", \"INFO\").upper()))\nclass SitewiseAsset:\n    \"\"\"\n    Interactions with sitewise asset - updates attributes values\n    \"\"\"\n    def __init__(self, aws_region=os.environ.get(\"AWS_REGION\")):\n        self.aws_region = aws_region\n        self.sitewise = boto3.client('iotsitewise', region_name=self.aws_region)\n        self.pollWaitTime = 0.5",
        "detail": "functions.source.association-updater.sitewise_asset",
        "documentation": {}
    },
    {
        "label": "SitewiseAssetsCache",
        "kind": 6,
        "importPath": "functions.source.association-updater.sitewise_assets_cache",
        "description": "functions.source.association-updater.sitewise_assets_cache",
        "peekOfCode": "class SitewiseAssetsCache:\n    \"\"\"\n    Interactions with dynamo table - saving and retrieving information\n    \"\"\"\n    def __init__(self, table_name=os.environ.get(\"DYNAMO_ASSETS_TABLE_NAME\"), aws_region=os.environ.get(\"AWS_REGION\")):\n        self.table_name = table_name\n        self.aws_region = aws_region\n        self.dynamodb = boto3.resource('dynamodb', region_name=self.aws_region)\n        self.table = self.dynamodb.Table(self.table_name)\n    def get(self, record_id):",
        "detail": "functions.source.association-updater.sitewise_assets_cache",
        "documentation": {}
    },
    {
        "label": "SitewiseIntegrationPoints",
        "kind": 6,
        "importPath": "functions.source.association-updater.sitewise_integration_points",
        "description": "functions.source.association-updater.sitewise_integration_points",
        "peekOfCode": "class SitewiseIntegrationPoints:\n    \"\"\"\n    Interactions with dynamo table - saving and retrieving information\n    \"\"\"\n    def __init__(self, table_name=os.environ.get(\"DYNAMO_INTEGRATION_POINTS_TABLE_NAME\"), aws_region=os.environ.get(\"AWS_REGION\")):\n        self.table_name = table_name\n        self.aws_region = aws_region\n        self.dynamodb = boto3.resource('dynamodb', region_name=self.aws_region)\n        self.table = self.dynamodb.Table(self.table_name)\n    def get(self, record_id):",
        "detail": "functions.source.association-updater.sitewise_integration_points",
        "documentation": {}
    },
    {
        "label": "Sqs",
        "kind": 6,
        "importPath": "functions.source.association-updater.sqs",
        "description": "functions.source.association-updater.sqs",
        "peekOfCode": "class Sqs:\n    def __init__(self, queue_url=os.environ['ASSETS_TO_UPDATE_QUEUE_URL'], batch_size=int(os.environ.get(\"BATCH_SIZE\", 10)), aws_region=os.environ.get(\"AWS_REGION\")):\n        self.queue_url =queue_url\n        self.batch_size =batch_size\n        self.aws_region = aws_region\n        self.sqs_client = boto3.client('sqs', region_name=self.aws_region)\n    def send_messages(self, messages):\n        for i in range(0, len(messages), self.batch_size):\n            messages_chunk = list(messages)[i:i + self.batch_size]   \n            entries = [{'Id': str(idx), 'MessageBody': json.dumps(msg), 'MessageGroupId': 'lifecycle_events'} for idx,msg in enumerate(messages_chunk)] ",
        "detail": "functions.source.association-updater.sqs",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "functions.source.association-updater.sqs",
        "description": "functions.source.association-updater.sqs",
        "peekOfCode": "logger = logging.getLogger()\nlogger.setLevel(getattr(logging, os.environ.get(\"LOG_LEVEL\", \"INFO\").upper()))\nclass Sqs:\n    def __init__(self, queue_url=os.environ['ASSETS_TO_UPDATE_QUEUE_URL'], batch_size=int(os.environ.get(\"BATCH_SIZE\", 10)), aws_region=os.environ.get(\"AWS_REGION\")):\n        self.queue_url =queue_url\n        self.batch_size =batch_size\n        self.aws_region = aws_region\n        self.sqs_client = boto3.client('sqs', region_name=self.aws_region)\n    def send_messages(self, messages):\n        for i in range(0, len(messages), self.batch_size):",
        "detail": "functions.source.association-updater.sqs",
        "documentation": {}
    },
    {
        "label": "test_associate_asset",
        "kind": 2,
        "importPath": "functions.source.association-updater.test_association_converter",
        "description": "functions.source.association-updater.test_association_converter",
        "peekOfCode": "def test_associate_asset():\n    child_asset = {\n        \"Id\": \"device-123456\",\n        \"AssetId\": \"device-123456\",\n        \"ParentAssetId\": None,\n        \"ParentHierarchyId\": None,\n        \"HierarchyName\": \"Temperature sensors\"\n    }\n    parent_asset = {\n        \"Id\": \"locaton-56789\",",
        "detail": "functions.source.association-updater.test_association_converter",
        "documentation": {}
    },
    {
        "label": "test_reassociate_asset",
        "kind": 2,
        "importPath": "functions.source.association-updater.test_association_converter",
        "description": "functions.source.association-updater.test_association_converter",
        "peekOfCode": "def test_reassociate_asset():\n    child_asset = {\n        \"Id\": \"device-123456\",\n        \"AssetId\": \"device-123456\",\n        \"ParentAssetId\": \"locaton-123456\",\n        \"ParentHierarchyId\": \"789-bnm-456\",\n        \"HierarchyName\": \"Temperature sensors\"\n    }\n    parent_asset = {\n        \"Id\": \"locaton-56789\",",
        "detail": "functions.source.association-updater.test_association_converter",
        "documentation": {}
    },
    {
        "label": "test_skip_association",
        "kind": 2,
        "importPath": "functions.source.association-updater.test_association_converter",
        "description": "functions.source.association-updater.test_association_converter",
        "peekOfCode": "def test_skip_association():\n    child_asset = {\n        \"Id\": \"device-123456\",\n        \"AssetId\": \"device-123456\",\n        \"ParentAssetId\": \"locaton-123456\",\n        \"ParentHierarchyId\": \"789-bnm-456\",\n        \"HierarchyName\": \"Temperature sensors\"\n    }\n    parent_asset = {\n        \"Id\": \"locaton-123456\",",
        "detail": "functions.source.association-updater.test_association_converter",
        "documentation": {}
    },
    {
        "label": "test_no_parent",
        "kind": 2,
        "importPath": "functions.source.association-updater.test_association_converter",
        "description": "functions.source.association-updater.test_association_converter",
        "peekOfCode": "def test_no_parent():\n    pass",
        "detail": "functions.source.association-updater.test_association_converter",
        "documentation": {}
    },
    {
        "label": "MockSitewise",
        "kind": 6,
        "importPath": "functions.source.association-updater.test_handler",
        "description": "functions.source.association-updater.test_handler",
        "peekOfCode": "class MockSitewise(Mock):\n    def __init__(self, *, aws_region=os.environ.get(\"AWS_REGION\")):\n        super(MockSitewise, self).__init__()\n        self.asset_descriptions = {\n            \"root-urban.io\": {\n                \"assetHierarchies\": [\n                    {\"id\": \"111-abc-345\", \"name\": \"Operators\"},\n                ]\n            },\n            \"operator-12313\": {",
        "detail": "functions.source.association-updater.test_handler",
        "documentation": {}
    },
    {
        "label": "MockSitewiseAssetsCache",
        "kind": 6,
        "importPath": "functions.source.association-updater.test_handler",
        "description": "functions.source.association-updater.test_handler",
        "peekOfCode": "class MockSitewiseAssetsCache(Mock):\n    def __init__(self, *, table_name=os.environ.get(\"DYNAMO_ASSETS_TABLE_NAME\"), aws_region=os.environ.get(\"AWS_REGION\")):\n        super(MockSitewiseAssetsCache, self).__init__()\n        self.asset_cache = {\n            'operator-op_1': {\n                \"Id\": \"operator-op_1\",\n                \"AssetId\": \"operator-12313\",\n                \"ParentAssetId\": None,\n                \"ParentHierarchyId\": None,\n                \"HierarchyName\": \"Operators\",",
        "detail": "functions.source.association-updater.test_handler",
        "documentation": {}
    },
    {
        "label": "MockSitewiseIntegrationPoints",
        "kind": 6,
        "importPath": "functions.source.association-updater.test_handler",
        "description": "functions.source.association-updater.test_handler",
        "peekOfCode": "class MockSitewiseIntegrationPoints(Mock):\n    def __init__(self, *, table_name=os.environ.get(\"DYNAMO_INTEGRATION_POINTS_TABLE_NAME\"), aws_region=os.environ.get(\"AWS_REGION\")):\n        super(MockSitewiseIntegrationPoints, self).__init__()\n        self.integration_points = {\n                'op_1': {\n                    \"Id\": \"op_1\",\n                    \"Reading\": {},\n                    \"Metadata\": {}\n                }\n            }",
        "detail": "functions.source.association-updater.test_handler",
        "documentation": {}
    },
    {
        "label": "test_handler",
        "kind": 2,
        "importPath": "functions.source.association-updater.test_handler",
        "description": "functions.source.association-updater.test_handler",
        "peekOfCode": "def test_handler():\n    event= {\n        \"Records\": [\n            {\"body\": \"{\\\"type\\\":\\\"lifecycle\\\",\\\"reading\\\":{\\\"et\\\":\\\"operator_updated\\\",\\\"id\\\":\\\"op_1\\\"}}\" },\n            {\"body\": \"{\\\"type\\\":\\\"lifecycle\\\",\\\"reading\\\":{\\\"et\\\":\\\"customer_updated\\\",\\\"id\\\":\\\"cust_1\\\"},\\\"metadata\\\":{\\\"ref\\\":{\\\"o\\\":[\\\"op_1\\\"]}}}\" },\n            {\"body\": \"{\\\"type\\\":\\\"lifecycle\\\",\\\"reading\\\":{\\\"et\\\":\\\"location_updated\\\",\\\"id\\\":\\\"loc_1\\\"},\\\"metadata\\\":{\\\"ref\\\":{\\\"c\\\":\\\"cust_1\\\"}}}\" },\n            {\"body\": \"{\\\"type\\\":\\\"lifecycle\\\",\\\"reading\\\":{\\\"et\\\":\\\"category_updated\\\",\\\"id\\\":\\\"cat_1-loc_1\\\"},\\\"metadata\\\":{\\\"ref\\\":{\\\"l\\\":\\\"loc_1\\\"}}}\" },\n            {\"body\": \"{\\\"type\\\":\\\"lifecycle\\\",\\\"reading\\\":{\\\"et\\\":\\\"device_updated\\\",\\\"id\\\":\\\"dev_1\\\",\\\"device_category\\\":\\\"cat_1\\\"},\\\"metadata\\\":{\\\"ref\\\":{\\\"l\\\":\\\"loc_1\\\"}}}\" },\n        ]\n    }",
        "detail": "functions.source.association-updater.test_handler",
        "documentation": {}
    },
    {
        "label": "test_get_cache_ids",
        "kind": 2,
        "importPath": "functions.source.association-updater.test_handler",
        "description": "functions.source.association-updater.test_handler",
        "peekOfCode": "def test_get_cache_ids():\n    pass",
        "detail": "functions.source.association-updater.test_handler",
        "documentation": {}
    },
    {
        "label": "os.environ['ASSETS_TO_UPDATE_QUEUE_URL']",
        "kind": 5,
        "importPath": "functions.source.association-updater.test_handler",
        "description": "functions.source.association-updater.test_handler",
        "peekOfCode": "os.environ['ASSETS_TO_UPDATE_QUEUE_URL'] = 'test.fifo'\nos.environ['DYNAMO_ASSETS_TABLE_NAME'] = 'test'\nos.environ['DYNAMO_INTEGRATION_POINTS_TABLE_NAME'] = 'integration_points'\nos.environ['AWS_REGION'] = 'us-east-1'\nfrom handler import handler, get_cache_ids\nfrom association_converter import AssociationConverter\nclass MockSitewise(Mock):\n    def __init__(self, *, aws_region=os.environ.get(\"AWS_REGION\")):\n        super(MockSitewise, self).__init__()\n        self.asset_descriptions = {",
        "detail": "functions.source.association-updater.test_handler",
        "documentation": {}
    },
    {
        "label": "os.environ['DYNAMO_ASSETS_TABLE_NAME']",
        "kind": 5,
        "importPath": "functions.source.association-updater.test_handler",
        "description": "functions.source.association-updater.test_handler",
        "peekOfCode": "os.environ['DYNAMO_ASSETS_TABLE_NAME'] = 'test'\nos.environ['DYNAMO_INTEGRATION_POINTS_TABLE_NAME'] = 'integration_points'\nos.environ['AWS_REGION'] = 'us-east-1'\nfrom handler import handler, get_cache_ids\nfrom association_converter import AssociationConverter\nclass MockSitewise(Mock):\n    def __init__(self, *, aws_region=os.environ.get(\"AWS_REGION\")):\n        super(MockSitewise, self).__init__()\n        self.asset_descriptions = {\n            \"root-urban.io\": {",
        "detail": "functions.source.association-updater.test_handler",
        "documentation": {}
    },
    {
        "label": "os.environ['DYNAMO_INTEGRATION_POINTS_TABLE_NAME']",
        "kind": 5,
        "importPath": "functions.source.association-updater.test_handler",
        "description": "functions.source.association-updater.test_handler",
        "peekOfCode": "os.environ['DYNAMO_INTEGRATION_POINTS_TABLE_NAME'] = 'integration_points'\nos.environ['AWS_REGION'] = 'us-east-1'\nfrom handler import handler, get_cache_ids\nfrom association_converter import AssociationConverter\nclass MockSitewise(Mock):\n    def __init__(self, *, aws_region=os.environ.get(\"AWS_REGION\")):\n        super(MockSitewise, self).__init__()\n        self.asset_descriptions = {\n            \"root-urban.io\": {\n                \"assetHierarchies\": [",
        "detail": "functions.source.association-updater.test_handler",
        "documentation": {}
    },
    {
        "label": "os.environ['AWS_REGION']",
        "kind": 5,
        "importPath": "functions.source.association-updater.test_handler",
        "description": "functions.source.association-updater.test_handler",
        "peekOfCode": "os.environ['AWS_REGION'] = 'us-east-1'\nfrom handler import handler, get_cache_ids\nfrom association_converter import AssociationConverter\nclass MockSitewise(Mock):\n    def __init__(self, *, aws_region=os.environ.get(\"AWS_REGION\")):\n        super(MockSitewise, self).__init__()\n        self.asset_descriptions = {\n            \"root-urban.io\": {\n                \"assetHierarchies\": [\n                    {\"id\": \"111-abc-345\", \"name\": \"Operators\"},",
        "detail": "functions.source.association-updater.test_handler",
        "documentation": {}
    },
    {
        "label": "mock_assets_cache",
        "kind": 5,
        "importPath": "functions.source.association-updater.test_handler",
        "description": "functions.source.association-updater.test_handler",
        "peekOfCode": "mock_assets_cache = MockSitewiseAssetsCache()\nmock_integration_points_cache = MockSitewiseIntegrationPoints()\nmock_sitewise = MockSitewise()\nmock_sqs = Mock()\nmock_sqs.send_messages = Mock()\nassociation_converter = AssociationConverter(mock_assets_cache, mock_sitewise)\n@patch(\"handler.assets_cache\", mock_assets_cache)\n@patch(\"handler.sitewise\", mock_sitewise)\n@patch(\"handler.association_converter\", association_converter)\n@patch(\"handler.integration_points_cache\", mock_integration_points_cache)",
        "detail": "functions.source.association-updater.test_handler",
        "documentation": {}
    },
    {
        "label": "mock_integration_points_cache",
        "kind": 5,
        "importPath": "functions.source.association-updater.test_handler",
        "description": "functions.source.association-updater.test_handler",
        "peekOfCode": "mock_integration_points_cache = MockSitewiseIntegrationPoints()\nmock_sitewise = MockSitewise()\nmock_sqs = Mock()\nmock_sqs.send_messages = Mock()\nassociation_converter = AssociationConverter(mock_assets_cache, mock_sitewise)\n@patch(\"handler.assets_cache\", mock_assets_cache)\n@patch(\"handler.sitewise\", mock_sitewise)\n@patch(\"handler.association_converter\", association_converter)\n@patch(\"handler.integration_points_cache\", mock_integration_points_cache)\n@patch(\"handler.sqs\", mock_sqs)",
        "detail": "functions.source.association-updater.test_handler",
        "documentation": {}
    },
    {
        "label": "mock_sitewise",
        "kind": 5,
        "importPath": "functions.source.association-updater.test_handler",
        "description": "functions.source.association-updater.test_handler",
        "peekOfCode": "mock_sitewise = MockSitewise()\nmock_sqs = Mock()\nmock_sqs.send_messages = Mock()\nassociation_converter = AssociationConverter(mock_assets_cache, mock_sitewise)\n@patch(\"handler.assets_cache\", mock_assets_cache)\n@patch(\"handler.sitewise\", mock_sitewise)\n@patch(\"handler.association_converter\", association_converter)\n@patch(\"handler.integration_points_cache\", mock_integration_points_cache)\n@patch(\"handler.sqs\", mock_sqs)\ndef test_handler():",
        "detail": "functions.source.association-updater.test_handler",
        "documentation": {}
    },
    {
        "label": "mock_sqs",
        "kind": 5,
        "importPath": "functions.source.association-updater.test_handler",
        "description": "functions.source.association-updater.test_handler",
        "peekOfCode": "mock_sqs = Mock()\nmock_sqs.send_messages = Mock()\nassociation_converter = AssociationConverter(mock_assets_cache, mock_sitewise)\n@patch(\"handler.assets_cache\", mock_assets_cache)\n@patch(\"handler.sitewise\", mock_sitewise)\n@patch(\"handler.association_converter\", association_converter)\n@patch(\"handler.integration_points_cache\", mock_integration_points_cache)\n@patch(\"handler.sqs\", mock_sqs)\ndef test_handler():\n    event= {",
        "detail": "functions.source.association-updater.test_handler",
        "documentation": {}
    },
    {
        "label": "mock_sqs.send_messages",
        "kind": 5,
        "importPath": "functions.source.association-updater.test_handler",
        "description": "functions.source.association-updater.test_handler",
        "peekOfCode": "mock_sqs.send_messages = Mock()\nassociation_converter = AssociationConverter(mock_assets_cache, mock_sitewise)\n@patch(\"handler.assets_cache\", mock_assets_cache)\n@patch(\"handler.sitewise\", mock_sitewise)\n@patch(\"handler.association_converter\", association_converter)\n@patch(\"handler.integration_points_cache\", mock_integration_points_cache)\n@patch(\"handler.sqs\", mock_sqs)\ndef test_handler():\n    event= {\n        \"Records\": [",
        "detail": "functions.source.association-updater.test_handler",
        "documentation": {}
    },
    {
        "label": "association_converter",
        "kind": 5,
        "importPath": "functions.source.association-updater.test_handler",
        "description": "functions.source.association-updater.test_handler",
        "peekOfCode": "association_converter = AssociationConverter(mock_assets_cache, mock_sitewise)\n@patch(\"handler.assets_cache\", mock_assets_cache)\n@patch(\"handler.sitewise\", mock_sitewise)\n@patch(\"handler.association_converter\", association_converter)\n@patch(\"handler.integration_points_cache\", mock_integration_points_cache)\n@patch(\"handler.sqs\", mock_sqs)\ndef test_handler():\n    event= {\n        \"Records\": [\n            {\"body\": \"{\\\"type\\\":\\\"lifecycle\\\",\\\"reading\\\":{\\\"et\\\":\\\"operator_updated\\\",\\\"id\\\":\\\"op_1\\\"}}\" },",
        "detail": "functions.source.association-updater.test_handler",
        "documentation": {}
    },
    {
        "label": "EventMappings",
        "kind": 6,
        "importPath": "functions.source.attributes-updater.event_mappings",
        "description": "functions.source.attributes-updater.event_mappings",
        "peekOfCode": "class EventMappings:\n    def __init__(self, table_name=os.environ.get(\"DYNAMO_EVENT_MAPPING_TABLE_NAME\"), aws_region=os.environ.get(\"AWS_REGION\")):\n        self.table_name = table_name\n        self.aws_region = aws_region\n        self.dynamodb = boto3.resource('dynamodb', region_name=self.aws_region)\n        self.table = self.dynamodb.Table(self.table_name)\n    def get_all(self):\n        response = self.table.scan()\n        return response[\"Items\"]",
        "detail": "functions.source.attributes-updater.event_mappings",
        "documentation": {}
    },
    {
        "label": "get_mapping",
        "kind": 2,
        "importPath": "functions.source.attributes-updater.handler",
        "description": "functions.source.attributes-updater.handler",
        "peekOfCode": "def get_mapping(event, mappings):\n    if not event['type'] == 'lifecycle':\n        return None\n    mapping = [x for x in mappings if x['Type'] == event['reading']['et']]\n    return mapping[0] if len(mapping) else None\ndef process_event(event, mappings):\n    mapping = get_mapping(event, mappings)\n    logger.info(f\"Mapping: {mapping}\")\n    if mapping is None:\n        return None",
        "detail": "functions.source.attributes-updater.handler",
        "documentation": {}
    },
    {
        "label": "process_event",
        "kind": 2,
        "importPath": "functions.source.attributes-updater.handler",
        "description": "functions.source.attributes-updater.handler",
        "peekOfCode": "def process_event(event, mappings):\n    mapping = get_mapping(event, mappings)\n    logger.info(f\"Mapping: {mapping}\")\n    if mapping is None:\n        return None\n    asset = assets_cache.get(f\"{mapping['Model']}-{event['reading']['id']}\")\n    logger.info(f\"Asset {asset}\")\n    if asset is None:\n        return None\n    if asset.get('AssetData') is None:",
        "detail": "functions.source.attributes-updater.handler",
        "documentation": {}
    },
    {
        "label": "handler",
        "kind": 2,
        "importPath": "functions.source.attributes-updater.handler",
        "description": "functions.source.attributes-updater.handler",
        "peekOfCode": "def handler(event, context):\n    logger.debug('event is {}'.format(event))\n    mappings = event_mappings.get_all()\n    logger.info(f'Event Mappings: {mappings}')\n    try:\n        for record in event['Records']:\n            # Batch by 10\n            body = json.loads(record[\"body\"])\n            logger.info(f\"Message: {body}\")\n            process_event(body, mappings)",
        "detail": "functions.source.attributes-updater.handler",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "functions.source.attributes-updater.handler",
        "description": "functions.source.attributes-updater.handler",
        "peekOfCode": "logger = logging.getLogger()\nlogger.setLevel(getattr(logging, os.environ.get(\"LOG_LEVEL\", \"INFO\").upper()))\nassets_cache = SitewiseAssetsCache(os.environ['DYNAMO_ASSETS_TABLE_NAME'], os.environ['AWS_REGION'])\nsitewise_asset = SitewiseAsset()\nevent_mappings = EventMappings(os.environ['DYNAMO_EVENT_MAPPING_TABLE_NAME'], os.environ['AWS_REGION'])\ndef get_mapping(event, mappings):\n    if not event['type'] == 'lifecycle':\n        return None\n    mapping = [x for x in mappings if x['Type'] == event['reading']['et']]\n    return mapping[0] if len(mapping) else None",
        "detail": "functions.source.attributes-updater.handler",
        "documentation": {}
    },
    {
        "label": "assets_cache",
        "kind": 5,
        "importPath": "functions.source.attributes-updater.handler",
        "description": "functions.source.attributes-updater.handler",
        "peekOfCode": "assets_cache = SitewiseAssetsCache(os.environ['DYNAMO_ASSETS_TABLE_NAME'], os.environ['AWS_REGION'])\nsitewise_asset = SitewiseAsset()\nevent_mappings = EventMappings(os.environ['DYNAMO_EVENT_MAPPING_TABLE_NAME'], os.environ['AWS_REGION'])\ndef get_mapping(event, mappings):\n    if not event['type'] == 'lifecycle':\n        return None\n    mapping = [x for x in mappings if x['Type'] == event['reading']['et']]\n    return mapping[0] if len(mapping) else None\ndef process_event(event, mappings):\n    mapping = get_mapping(event, mappings)",
        "detail": "functions.source.attributes-updater.handler",
        "documentation": {}
    },
    {
        "label": "sitewise_asset",
        "kind": 5,
        "importPath": "functions.source.attributes-updater.handler",
        "description": "functions.source.attributes-updater.handler",
        "peekOfCode": "sitewise_asset = SitewiseAsset()\nevent_mappings = EventMappings(os.environ['DYNAMO_EVENT_MAPPING_TABLE_NAME'], os.environ['AWS_REGION'])\ndef get_mapping(event, mappings):\n    if not event['type'] == 'lifecycle':\n        return None\n    mapping = [x for x in mappings if x['Type'] == event['reading']['et']]\n    return mapping[0] if len(mapping) else None\ndef process_event(event, mappings):\n    mapping = get_mapping(event, mappings)\n    logger.info(f\"Mapping: {mapping}\")",
        "detail": "functions.source.attributes-updater.handler",
        "documentation": {}
    },
    {
        "label": "event_mappings",
        "kind": 5,
        "importPath": "functions.source.attributes-updater.handler",
        "description": "functions.source.attributes-updater.handler",
        "peekOfCode": "event_mappings = EventMappings(os.environ['DYNAMO_EVENT_MAPPING_TABLE_NAME'], os.environ['AWS_REGION'])\ndef get_mapping(event, mappings):\n    if not event['type'] == 'lifecycle':\n        return None\n    mapping = [x for x in mappings if x['Type'] == event['reading']['et']]\n    return mapping[0] if len(mapping) else None\ndef process_event(event, mappings):\n    mapping = get_mapping(event, mappings)\n    logger.info(f\"Mapping: {mapping}\")\n    if mapping is None:",
        "detail": "functions.source.attributes-updater.handler",
        "documentation": {}
    },
    {
        "label": "SitewiseAsset",
        "kind": 6,
        "importPath": "functions.source.attributes-updater.sitewise_asset",
        "description": "functions.source.attributes-updater.sitewise_asset",
        "peekOfCode": "class SitewiseAsset:\n    \"\"\"\n    Interactions with sitewise asset - creation, updating, and deletion.\n    \"\"\"\n    def __init__(self, aws_region=os.environ.get(\"AWS_REGION\")):\n        self.aws_region = aws_region\n        self.sitewise = boto3.client('iotsitewise', region_name=self.aws_region)\n        self.pollWaitTime = 0.5\n    def update_values(self, entries):\n        logger.info(f'Updating attributes values {entries}')",
        "detail": "functions.source.attributes-updater.sitewise_asset",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "functions.source.attributes-updater.sitewise_asset",
        "description": "functions.source.attributes-updater.sitewise_asset",
        "peekOfCode": "logger = logging.getLogger()\nlogger.setLevel(getattr(logging, os.environ.get(\"LOG_LEVEL\", \"INFO\").upper()))\nclass SitewiseAsset:\n    \"\"\"\n    Interactions with sitewise asset - creation, updating, and deletion.\n    \"\"\"\n    def __init__(self, aws_region=os.environ.get(\"AWS_REGION\")):\n        self.aws_region = aws_region\n        self.sitewise = boto3.client('iotsitewise', region_name=self.aws_region)\n        self.pollWaitTime = 0.5",
        "detail": "functions.source.attributes-updater.sitewise_asset",
        "documentation": {}
    },
    {
        "label": "SitewiseAssetsCache",
        "kind": 6,
        "importPath": "functions.source.attributes-updater.sitewise_assets_cache",
        "description": "functions.source.attributes-updater.sitewise_assets_cache",
        "peekOfCode": "class SitewiseAssetsCache:\n    \"\"\"\n    Interactions with dynamo table - saving and retrieving information\n    \"\"\"\n    def __init__(self, table_name=os.environ.get(\"DYNAMO_ASSETS_TABLE_NAME\"), aws_region=os.environ.get(\"AWS_REGION\")):\n        self.table_name = table_name\n        self.aws_region = aws_region\n        self.dynamodb = boto3.resource('dynamodb', region_name=self.aws_region)\n        self.table = self.dynamodb.Table(self.table_name)\n    def get(self, record_id):",
        "detail": "functions.source.attributes-updater.sitewise_assets_cache",
        "documentation": {}
    },
    {
        "label": "test_process_new_asset",
        "kind": 2,
        "importPath": "functions.source.attributes-updater.test_handler",
        "description": "functions.source.attributes-updater.test_handler",
        "peekOfCode": "def test_process_new_asset():\n    event = {\n        \"type\": \"lifecycle\",\n        \"reading\": {\n            \"et\": \"device_updated\",\n            \"id\": \"abc123\",\n            \"di\": \"100001\",\n            \"name\": \"test device\"\n        }\n    }",
        "detail": "functions.source.attributes-updater.test_handler",
        "documentation": {}
    },
    {
        "label": "test_process_updated_asset",
        "kind": 2,
        "importPath": "functions.source.attributes-updater.test_handler",
        "description": "functions.source.attributes-updater.test_handler",
        "peekOfCode": "def test_process_updated_asset():\n    event = {\n        \"type\": \"lifecycle\",\n        \"reading\": {\n            \"et\": \"device_updated\",\n            \"id\": \"abc123\",\n            \"di\": \"100002\",\n            \"name\": \"test device 2\"\n        }\n    }",
        "detail": "functions.source.attributes-updater.test_handler",
        "documentation": {}
    },
    {
        "label": "test_process_missing_event_value",
        "kind": 2,
        "importPath": "functions.source.attributes-updater.test_handler",
        "description": "functions.source.attributes-updater.test_handler",
        "peekOfCode": "def test_process_missing_event_value():\n    event = {\n        \"type\": \"lifecycle\",\n        \"reading\": {\n            \"et\": \"device_updated\",\n            \"id\": \"abc123\",\n            \"di\": \"100002\",\n        }\n    }\n    asset_cache = {   ",
        "detail": "functions.source.attributes-updater.test_handler",
        "documentation": {}
    },
    {
        "label": "os.environ[\"DYNAMO_ASSETS_TABLE_NAME\"]",
        "kind": 5,
        "importPath": "functions.source.attributes-updater.test_handler",
        "description": "functions.source.attributes-updater.test_handler",
        "peekOfCode": "os.environ[\"DYNAMO_ASSETS_TABLE_NAME\"] = \"test\"\nos.environ[\"DYNAMO_EVENT_MAPPING_TABLE_NAME\"] = \"mappings\"\nos.environ[\"AWS_REGION\"] = \"us-east-1\"\nfrom handler import process_event\nmock_assets_cache  = Mock()\nmock_sitewise_asset = Mock()\nmock_event_mappings = Mock()\nwith open('data/mappings.json') as json_file:\n    mappings = json.load(json_file)\n@freeze_time(\"2021-05-14\")",
        "detail": "functions.source.attributes-updater.test_handler",
        "documentation": {}
    },
    {
        "label": "os.environ[\"DYNAMO_EVENT_MAPPING_TABLE_NAME\"]",
        "kind": 5,
        "importPath": "functions.source.attributes-updater.test_handler",
        "description": "functions.source.attributes-updater.test_handler",
        "peekOfCode": "os.environ[\"DYNAMO_EVENT_MAPPING_TABLE_NAME\"] = \"mappings\"\nos.environ[\"AWS_REGION\"] = \"us-east-1\"\nfrom handler import process_event\nmock_assets_cache  = Mock()\nmock_sitewise_asset = Mock()\nmock_event_mappings = Mock()\nwith open('data/mappings.json') as json_file:\n    mappings = json.load(json_file)\n@freeze_time(\"2021-05-14\")\n@patch(\"handler.event_mappings\", mock_event_mappings)",
        "detail": "functions.source.attributes-updater.test_handler",
        "documentation": {}
    },
    {
        "label": "os.environ[\"AWS_REGION\"]",
        "kind": 5,
        "importPath": "functions.source.attributes-updater.test_handler",
        "description": "functions.source.attributes-updater.test_handler",
        "peekOfCode": "os.environ[\"AWS_REGION\"] = \"us-east-1\"\nfrom handler import process_event\nmock_assets_cache  = Mock()\nmock_sitewise_asset = Mock()\nmock_event_mappings = Mock()\nwith open('data/mappings.json') as json_file:\n    mappings = json.load(json_file)\n@freeze_time(\"2021-05-14\")\n@patch(\"handler.event_mappings\", mock_event_mappings)\n@patch(\"handler.assets_cache\", mock_assets_cache)",
        "detail": "functions.source.attributes-updater.test_handler",
        "documentation": {}
    },
    {
        "label": "mock_sitewise_asset",
        "kind": 5,
        "importPath": "functions.source.attributes-updater.test_handler",
        "description": "functions.source.attributes-updater.test_handler",
        "peekOfCode": "mock_sitewise_asset = Mock()\nmock_event_mappings = Mock()\nwith open('data/mappings.json') as json_file:\n    mappings = json.load(json_file)\n@freeze_time(\"2021-05-14\")\n@patch(\"handler.event_mappings\", mock_event_mappings)\n@patch(\"handler.assets_cache\", mock_assets_cache)\n@patch(\"handler.sitewise_asset\", mock_sitewise_asset)\ndef test_process_new_asset():\n    event = {",
        "detail": "functions.source.attributes-updater.test_handler",
        "documentation": {}
    },
    {
        "label": "mock_event_mappings",
        "kind": 5,
        "importPath": "functions.source.attributes-updater.test_handler",
        "description": "functions.source.attributes-updater.test_handler",
        "peekOfCode": "mock_event_mappings = Mock()\nwith open('data/mappings.json') as json_file:\n    mappings = json.load(json_file)\n@freeze_time(\"2021-05-14\")\n@patch(\"handler.event_mappings\", mock_event_mappings)\n@patch(\"handler.assets_cache\", mock_assets_cache)\n@patch(\"handler.sitewise_asset\", mock_sitewise_asset)\ndef test_process_new_asset():\n    event = {\n        \"type\": \"lifecycle\",",
        "detail": "functions.source.attributes-updater.test_handler",
        "documentation": {}
    },
    {
        "label": "handler",
        "kind": 2,
        "importPath": "functions.source.iot-core-to-sqs.handler",
        "description": "functions.source.iot-core-to-sqs.handler",
        "peekOfCode": "def handler(event, context):    \n    sqs_client = boto3.client('sqs',region_name=os.environ.get(\"AWS_REGION\"))\n    queue_url = os.environ['LIFECICLE_EVENTS_QUEUE_URL']\n    # Send category_updated event before device_updated one, so that the category can be created in case it doesn't exist\n    if event['type'] == 'lifecycle' and event['reading']['et'] == 'device_updated' and event['reading']['device_category'] is not None:\n        categoty_event =    {\n            'type': \"lifecycle\",\n            'reading': {\n                'et': \"category_updated\",\n                'id': f\"{event['reading']['device_category']}-{event['metadata']['ref']['l']}\",",
        "detail": "functions.source.iot-core-to-sqs.handler",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "functions.source.iot-core-to-sqs.handler",
        "description": "functions.source.iot-core-to-sqs.handler",
        "peekOfCode": "logger = logging.getLogger()\nlogger.setLevel(getattr(logging, os.environ.get(\"LOG_LEVEL\", \"INFO\").upper()))\ndef handler(event, context):    \n    sqs_client = boto3.client('sqs',region_name=os.environ.get(\"AWS_REGION\"))\n    queue_url = os.environ['LIFECICLE_EVENTS_QUEUE_URL']\n    # Send category_updated event before device_updated one, so that the category can be created in case it doesn't exist\n    if event['type'] == 'lifecycle' and event['reading']['et'] == 'device_updated' and event['reading']['device_category'] is not None:\n        categoty_event =    {\n            'type': \"lifecycle\",\n            'reading': {",
        "detail": "functions.source.iot-core-to-sqs.handler",
        "documentation": {}
    },
    {
        "label": "test_handler",
        "kind": 2,
        "importPath": "functions.source.iot-core-to-sqs.test_handler",
        "description": "functions.source.iot-core-to-sqs.test_handler",
        "peekOfCode": "def test_handler():\n    aws_region = 'us-east-1'\n    sqs = boto3.client('sqs', region_name='us-east-1')\n    queue = sqs.create_queue(QueueName='test-queue.fifo', Attributes={\"FifoQueue\": \"true\"})\n    event = {\n      \"type\": \"lifecycle\",\n      \"reading\": {\n        \"et\": \"model_updated\",\n        \"asset_model\": {\n            \"deviceType\": \"(G4) Gateway\",",
        "detail": "functions.source.iot-core-to-sqs.test_handler",
        "documentation": {}
    },
    {
        "label": "test_device_events",
        "kind": 2,
        "importPath": "functions.source.iot-core-to-sqs.test_handler",
        "description": "functions.source.iot-core-to-sqs.test_handler",
        "peekOfCode": "def test_device_events():\n    aws_region = 'us-east-1'\n    sqs = boto3.client('sqs', region_name='us-east-1')\n    queue = sqs.create_queue(QueueName='test-queue.fifo', Attributes={\"FifoQueue\": \"true\"})\n    event = {\n        \"type\": \"lifecycle\",\n        \"reading\": {\n            \"et\": \"device_updated\",\n            \"id\": \"ATNEZ6N0ZH0p8UEtZFrQrQ\",\n            \"di\": \"1000c20\",",
        "detail": "functions.source.iot-core-to-sqs.test_handler",
        "documentation": {}
    },
    {
        "label": "save_mappings",
        "kind": 2,
        "importPath": "functions.source.lifecycle-events-mapping-updater.handler",
        "description": "functions.source.lifecycle-events-mapping-updater.handler",
        "peekOfCode": "def save_mappings(mappings, table_name=os.environ['DYNAMO_EVENT_MAPPING_TABLE_NAME'], region_name=os.environ.get(\"AWS_REGION\")):\n    dynamodb = boto3.resource('dynamodb', region_name=region_name)\n    table = dynamodb.Table(table_name)\n    for mapping in mappings:\n        logger.info(f\"Saving mapping: {mapping}\")\n        table.put_item(Item=mapping)\ndef handler(event, context):\n    s3_client = boto3.client('s3', region_name=os.environ.get(\"AWS_REGION\"))\n    for record in event['Records']:\n        bucket = record['s3']['bucket']['name']",
        "detail": "functions.source.lifecycle-events-mapping-updater.handler",
        "documentation": {}
    },
    {
        "label": "handler",
        "kind": 2,
        "importPath": "functions.source.lifecycle-events-mapping-updater.handler",
        "description": "functions.source.lifecycle-events-mapping-updater.handler",
        "peekOfCode": "def handler(event, context):\n    s3_client = boto3.client('s3', region_name=os.environ.get(\"AWS_REGION\"))\n    for record in event['Records']:\n        bucket = record['s3']['bucket']['name']\n        key = unquote_plus(record['s3']['object']['key'])\n        tmpkey = key.replace('/', '')\n        download_path = '/tmp/{}{}'.format(uuid.uuid4(), tmpkey)\n        s3_client.download_file(bucket, key, download_path)\n        with open(download_path) as json_file:\n            data = json.load(json_file)",
        "detail": "functions.source.lifecycle-events-mapping-updater.handler",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "functions.source.lifecycle-events-mapping-updater.handler",
        "description": "functions.source.lifecycle-events-mapping-updater.handler",
        "peekOfCode": "logger = logging.getLogger()\nlogger.setLevel(getattr(logging, os.environ.get(\"LOG_LEVEL\", \"INFO\").upper()))\ndef save_mappings(mappings, table_name=os.environ['DYNAMO_EVENT_MAPPING_TABLE_NAME'], region_name=os.environ.get(\"AWS_REGION\")):\n    dynamodb = boto3.resource('dynamodb', region_name=region_name)\n    table = dynamodb.Table(table_name)\n    for mapping in mappings:\n        logger.info(f\"Saving mapping: {mapping}\")\n        table.put_item(Item=mapping)\ndef handler(event, context):\n    s3_client = boto3.client('s3', region_name=os.environ.get(\"AWS_REGION\"))",
        "detail": "functions.source.lifecycle-events-mapping-updater.handler",
        "documentation": {}
    },
    {
        "label": "test_handler",
        "kind": 2,
        "importPath": "functions.source.lifecycle-events-mapping-updater.test_handler",
        "description": "functions.source.lifecycle-events-mapping-updater.test_handler",
        "peekOfCode": "def test_handler():\n    aws_region = 'us-east-1'\n    table_name = \"test\"\n    bucket = 'mybucket'\n    key = 'sitewise/test/mappings.json'\n    test_file_path = 'data/mappings.json'\n    s3 = boto3.client('s3', region_name=aws_region)\n    s3.create_bucket(Bucket=bucket)   \n    s3.put_object(Bucket=bucket, Key=key , Body=open(test_file_path).read())\n    dynamo = boto3.client('dynamodb', region_name=aws_region)",
        "detail": "functions.source.lifecycle-events-mapping-updater.test_handler",
        "documentation": {}
    },
    {
        "label": "cache_integration_points",
        "kind": 2,
        "importPath": "functions.source.s3-to-lifecycle-events-converter.handler",
        "description": "functions.source.s3-to-lifecycle-events-converter.handler",
        "peekOfCode": "def cache_integration_points(messages):\n    operators = [message for message in messages if message.get('type') == 'lifecycle' and message.get('reading', {}).get('et') == 'operator_updated']\n    for operator in operators:\n        integration_points_dynamo.save(operator)\ndef send_sqs_messages(messages, queue_url=os.environ['LIFECICLE_EVENTS_QUEUE_URL'], batch_size=int(os.environ.get(\"BATCH_SIZE\", 10))):\n    sqs_client = boto3.client('sqs', region_name=os.environ.get(\"AWS_REGION\"))\n    for i in range(0, len(messages), batch_size):\n        messages_chunk = list(messages)[i:i + batch_size]   \n        entries = [{'Id': str(idx), 'MessageBody': json.dumps(msg), 'MessageGroupId': 'lifecycle_events'} for idx,msg in enumerate(messages_chunk)] \n        response = sqs_client.send_message_batch(",
        "detail": "functions.source.s3-to-lifecycle-events-converter.handler",
        "documentation": {}
    },
    {
        "label": "send_sqs_messages",
        "kind": 2,
        "importPath": "functions.source.s3-to-lifecycle-events-converter.handler",
        "description": "functions.source.s3-to-lifecycle-events-converter.handler",
        "peekOfCode": "def send_sqs_messages(messages, queue_url=os.environ['LIFECICLE_EVENTS_QUEUE_URL'], batch_size=int(os.environ.get(\"BATCH_SIZE\", 10))):\n    sqs_client = boto3.client('sqs', region_name=os.environ.get(\"AWS_REGION\"))\n    for i in range(0, len(messages), batch_size):\n        messages_chunk = list(messages)[i:i + batch_size]   \n        entries = [{'Id': str(idx), 'MessageBody': json.dumps(msg), 'MessageGroupId': 'lifecycle_events'} for idx,msg in enumerate(messages_chunk)] \n        response = sqs_client.send_message_batch(\n            QueueUrl=queue_url,\n            Entries=entries\n        )\n        logger.info(f\"Successfully {response}\")",
        "detail": "functions.source.s3-to-lifecycle-events-converter.handler",
        "documentation": {}
    },
    {
        "label": "handler",
        "kind": 2,
        "importPath": "functions.source.s3-to-lifecycle-events-converter.handler",
        "description": "functions.source.s3-to-lifecycle-events-converter.handler",
        "peekOfCode": "def handler(event, context):\n    sqs_messages = []\n    s3_client = boto3.client('s3', region_name=os.environ.get(\"AWS_REGION\"))\n    for record in event['Records']:\n        bucket = record['s3']['bucket']['name']\n        key = unquote_plus(record['s3']['object']['key'])\n        tmpkey = key.replace('/', '')\n        download_path = '/tmp/{}{}'.format(uuid.uuid4(), tmpkey)\n        s3_client.download_file(bucket, key, download_path)\n        with open(download_path) as json_file:",
        "detail": "functions.source.s3-to-lifecycle-events-converter.handler",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "functions.source.s3-to-lifecycle-events-converter.handler",
        "description": "functions.source.s3-to-lifecycle-events-converter.handler",
        "peekOfCode": "logger = logging.getLogger()\nlogger.setLevel(getattr(logging, os.environ.get(\"LOG_LEVEL\", \"INFO\").upper()))\nintegration_points_dynamo = SitewiseIntegrationPoints(os.environ['DYNAMO_INTEGRATION_POINTS_TABLE_NAME'], os.environ['AWS_REGION'])\ndef cache_integration_points(messages):\n    operators = [message for message in messages if message.get('type') == 'lifecycle' and message.get('reading', {}).get('et') == 'operator_updated']\n    for operator in operators:\n        integration_points_dynamo.save(operator)\ndef send_sqs_messages(messages, queue_url=os.environ['LIFECICLE_EVENTS_QUEUE_URL'], batch_size=int(os.environ.get(\"BATCH_SIZE\", 10))):\n    sqs_client = boto3.client('sqs', region_name=os.environ.get(\"AWS_REGION\"))\n    for i in range(0, len(messages), batch_size):",
        "detail": "functions.source.s3-to-lifecycle-events-converter.handler",
        "documentation": {}
    },
    {
        "label": "integration_points_dynamo",
        "kind": 5,
        "importPath": "functions.source.s3-to-lifecycle-events-converter.handler",
        "description": "functions.source.s3-to-lifecycle-events-converter.handler",
        "peekOfCode": "integration_points_dynamo = SitewiseIntegrationPoints(os.environ['DYNAMO_INTEGRATION_POINTS_TABLE_NAME'], os.environ['AWS_REGION'])\ndef cache_integration_points(messages):\n    operators = [message for message in messages if message.get('type') == 'lifecycle' and message.get('reading', {}).get('et') == 'operator_updated']\n    for operator in operators:\n        integration_points_dynamo.save(operator)\ndef send_sqs_messages(messages, queue_url=os.environ['LIFECICLE_EVENTS_QUEUE_URL'], batch_size=int(os.environ.get(\"BATCH_SIZE\", 10))):\n    sqs_client = boto3.client('sqs', region_name=os.environ.get(\"AWS_REGION\"))\n    for i in range(0, len(messages), batch_size):\n        messages_chunk = list(messages)[i:i + batch_size]   \n        entries = [{'Id': str(idx), 'MessageBody': json.dumps(msg), 'MessageGroupId': 'lifecycle_events'} for idx,msg in enumerate(messages_chunk)] ",
        "detail": "functions.source.s3-to-lifecycle-events-converter.handler",
        "documentation": {}
    },
    {
        "label": "SitewiseIntegrationPoints",
        "kind": 6,
        "importPath": "functions.source.s3-to-lifecycle-events-converter.sitewise_integration_points",
        "description": "functions.source.s3-to-lifecycle-events-converter.sitewise_integration_points",
        "peekOfCode": "class SitewiseIntegrationPoints:\n    \"\"\"\n    Interactions with dynamo table - saving and retrieving information\n    \"\"\"\n    def __init__(self, table_name=os.environ.get(\"DYNAMO_INTEGRATION_POINTS_TABLE_NAME\"), aws_region=os.environ.get(\"AWS_REGION\")):\n        self.table_name = table_name\n        self.aws_region = aws_region\n        self.dynamodb = boto3.resource('dynamodb', region_name=self.aws_region)\n        self.table = self.dynamodb.Table(self.table_name)\n    def get(self, record_id):",
        "detail": "functions.source.s3-to-lifecycle-events-converter.sitewise_integration_points",
        "documentation": {}
    },
    {
        "label": "test_send_sqs_messages",
        "kind": 2,
        "importPath": "functions.source.s3-to-lifecycle-events-converter.test_handler",
        "description": "functions.source.s3-to-lifecycle-events-converter.test_handler",
        "peekOfCode": "def test_send_sqs_messages():\n    aws_region = 'us-east-1'\n    messages = [{'id': idx, 'msg': str(uuid.uuid4())} for idx in range(25)]\n    sqs = boto3.client('sqs', region_name=aws_region)\n    queue = sqs.create_queue(QueueName='test-queue.fifo', Attributes={\"FifoQueue\": \"true\"})\n    with patch.dict(os.environ, {\"LIFECICLE_EVENTS_QUEUE_URL\": queue[\"QueueUrl\"], \"AWS_REGION\": aws_region, \"DYNAMO_INTEGRATION_POINTS_TABLE_NAME\": \"test\" }):\n        from handler import send_sqs_messages\n        send_sqs_messages(messages=messages)\n    response = sqs.get_queue_attributes(QueueUrl=queue[\"QueueUrl\"])\n    assert int(response[\"Attributes\"][\"ApproximateNumberOfMessages\"]) == 25",
        "detail": "functions.source.s3-to-lifecycle-events-converter.test_handler",
        "documentation": {}
    },
    {
        "label": "test_handler",
        "kind": 2,
        "importPath": "functions.source.s3-to-lifecycle-events-converter.test_handler",
        "description": "functions.source.s3-to-lifecycle-events-converter.test_handler",
        "peekOfCode": "def test_handler():\n    aws_region = 'us-east-1'\n    bucket = 'mybucket'\n    key = 'sitewise/test/test.json'\n    test_file_path = 'data/test.json'\n    s3 = boto3.client('s3', region_name=aws_region)\n    s3.create_bucket(Bucket=bucket)   \n    s3.put_object(Bucket=bucket, Key=key , Body=open(test_file_path).read())\n    sqs = boto3.client('sqs', region_name=aws_region)\n    queue = sqs.create_queue(QueueName='test-queue.fifo', Attributes={\"FifoQueue\": \"true\"})",
        "detail": "functions.source.s3-to-lifecycle-events-converter.test_handler",
        "documentation": {}
    }
]